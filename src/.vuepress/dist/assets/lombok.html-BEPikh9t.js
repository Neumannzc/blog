import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o,c as p,a as n,b as a,d as c,e as l,f as i}from"./app-W3RIlOde.js";const u={},r={href:"https://projectlombok.org/",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"再也不用编写另一个 getter 或 equals 方法了",-1),k=n("p",null,"只需一个注释，您的类就拥有了一个功能齐全的构建器，自动化了您的日志记录变量等等。",-1),v=i(`<h2 id="一、-onx" tabindex="-1"><a class="header-anchor" href="#一、-onx"><span>一、@onX</span></a></h2><p>例如 <code>onConstructor</code>, <code>oMethod</code>, 和 <code>onParam</code> 允许你在生成的代码中注入自定义的注解。一个常见的用例是结合 Spring 的 <code>@Autowired</code>。</p><p>在 Spring 的组件（如 <code>@Service</code>、<code>@Controller</code>、<code>@Component</code>、<code>@Repository</code> 等）中使用 <code>@RequiredArgsConstructor(onConstructor = @__(@Autowired))</code>，可以让 Lombok 在生成构造函数时也加上 <code>@Autowired</code> 注解，这样，Spring 就可以自动注入所需的依赖。</p><p>例如下面这段代码</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token punctuation">(</span>onConstructor <span class="token operator">=</span> <span class="token annotation punctuation">@__</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AnotherService</span> anotherService<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码片段使用 Lombok 和 Spring 注解，Lombok 会为其生成以下代码</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AnotherService</span> anotherService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token class-name">MyService</span><span class="token punctuation">(</span><span class="token class-name">AnotherService</span> anotherService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>anotherService <span class="token operator">=</span> anotherService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从生成的代码中可以看出：</p><ul><li>为 <code>MyService</code> 生成了一个构造函数，该构造函数接受一个 <code>AnotherService</code> 类型的参数。</li><li>由于构造函数上有 <code>@Autowired</code> 注解，Spring 会自动查找合适的 <code>AnotherService</code> bean 实例并注入到 <code>MyService</code> 中。</li></ul><p>这种方式结合了 Lombok 的自动代码生成功能和 Spring 的依赖注入功能，使得代码更为简洁。</p><p>但是，使用此技巧时要确保团队成员都理解其背后的含义，以避免混淆。</p><h2 id="二、-delegate" tabindex="-1"><a class="header-anchor" href="#二、-delegate"><span>二、@Delegate</span></a></h2><p><code>@Delegate</code>可以让你的类使用其他类的方法，而不需要自己写代码。</p><p>比如，你有一个类叫做A，它有一个方法叫做sayHello()，你想让另一个类B也能用这个方法，那就可以在B类中加上一个A类型的字段，并在这个字段上加上@Delegate注解，这样，B类就可以直接调用sayHello()方法，就像它是自己的方法一样。看个例子：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 一个类，有一个方法</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 一个类，委托了A类的方法</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Delegate</span> <span class="token comment">// 委托A类的方法</span>
    <span class="token keyword">private</span> <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        b<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用A类的方法</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样写最大的好处就是可以避免类的层次过深或者耦合过紧，提高代码的可读性和可维护性，各种继承来继承去是真的看得头疼。</p><h2 id="三、-cleanup" tabindex="-1"><a class="header-anchor" href="#三、-cleanup"><span>三、@Cleanup</span></a></h2><p><code>@Cleanup</code>可以自动管理输入输出流等各种需要释放的资源，确保安全地调用close方法。</p><p>它的使用方法是在声明的资源前加上<code>@Cleanup</code>，例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Cleanup</span> <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;some/file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，当你的代码执行完毕后，Lombok会自动在一个try-finally块中调用<code>in.close()</code>方法，释放资源。</p><p>如果要释放资源的方法名不是close，也可以指定要调用的方法名，例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Cleanup</span><span class="token punctuation">(</span><span class="token string">&quot;release&quot;</span><span class="token punctuation">)</span> <span class="token class-name">MyResource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Lombok会自动在try-finally块中调用<code>resource.release()</code>方法，释放资源。</p><p>可以看到，这比手动写try-finally要简洁得太多了，只要使用<code>@Cleanup</code>就能管理任何有无参方法的资源，指定正确的方法名即可。</p><h2 id="四、-singular-和-builder-组合" tabindex="-1"><a class="header-anchor" href="#四、-singular-和-builder-组合"><span>四、@Singular 和 @Builder 组合</span></a></h2><p><code>@Builder</code>让你的类支持链式构造，而<code>@Singular</code>让集合类型字段可以更方便的维护。</p><p><code>@Singular</code>注解可以用在集合类型的字段上，它会生成两个方法，一个是添加单个元素的方法，一个是添加整个集合的方法。这两个方法可以和 <code>@Builder</code> 生成的其他方法一起链式调用，给你的类的所有字段赋值。</p><p>这么讲可能有点懵，直接看示例:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Builder</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Singular</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hobbies<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用 @Builder 和 @Singular 生成的方法</span>
<span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;练习时长两年半&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">hobby</span><span class="token punctuation">(</span><span class="token string">&quot;篮球&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 添加单个元素</span>
    <span class="token punctuation">.</span><span class="token function">hobby</span><span class="token punctuation">(</span><span class="token string">&quot;唱歌&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 添加单个元素</span>
    <span class="token punctuation">.</span><span class="token function">hobbies</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;跳舞&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;其他&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 添加整个集合</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 构造 User 对象</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，使用 <code>@Singular</code> 注解的好处是，你可以灵活地添加集合类型的字段，而不需要自己创建和初始化集合对象。</p><p>另外，使用 <code>@Singular</code> 注解生成的集合字段，在调用 <code>build()</code> 方法后，会被转换为不可变的集合，这样可以保证对象的不变性和线程安全性。你也可以使用 <code>clear()</code> 方法来清空集合字段，例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;签&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">hobby</span><span class="token punctuation">(</span><span class="token string">&quot;说唱&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">hobby</span><span class="token punctuation">(</span><span class="token string">&quot;跳舞&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">clearHobbies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 清空集合字段</span>
    <span class="token punctuation">.</span><span class="token function">hobby</span><span class="token punctuation">(</span><span class="token string">&quot;踩缝纫机&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 重新添加元素</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但需要注意的是，如果你的类继承了一个父类，那么 <code>@Builder</code> 只会生成当前类的字段和参数，不包括父类的。</p><h2 id="五、-with" tabindex="-1"><a class="header-anchor" href="#五、-with"><span>五、@With</span></a></h2><p>允许你创建一个新的对象，该对象是当前对象的副本，但某些字段的值已被更改。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@With</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  
  
<span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment">// 创建一个新的 Person 对象，其 name 为 &quot;Alice&quot;，但 age 为 31</span>
<span class="token class-name">Person</span> updatedPerson <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">withAge</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、结束语" tabindex="-1"><a class="header-anchor" href="#六、结束语"><span>六、结束语</span></a></h2><p>请注意，尽管 Lombok 提供了许多方便的功能，但<strong>过度使用</strong>或<strong>不当使用</strong>可能会导致代码难以理解和维护。</p><p>因此，在使用这些功能时，务必始终保持审慎，并且要充分考虑其影响。</p>`,40);function m(b,g){const s=t("ExternalLinkIcon");return o(),p("div",null,[n("p",null,[n("a",r,[a("lombok"),c(s)]),a(" 是一个 java 库，它会自动插入您的编辑器和构建工具，为您的 Java 增添趣味。")]),d,k,l(" more "),v])}const f=e(u,[["render",m],["__file","lombok.html.vue"]]),w=JSON.parse('{"path":"/posts/backend/lombok.html","title":"lombok的使用","lang":"zh-CN","frontmatter":{"title":"lombok的使用","date":"2024-05-07T00:00:00.000Z","icon":"dragon","category":["后端"],"tag":["开发示例"],"order":120,"description":"lombok 是一个 java 库，它会自动插入您的编辑器和构建工具，为您的 Java 增添趣味。 再也不用编写另一个 getter 或 equals 方法了 只需一个注释，您的类就拥有了一个功能齐全的构建器，自动化了您的日志记录变量等等。","head":[["meta",{"property":"og:url","content":"https://github.com/Neumannzc/blog/blog/posts/backend/lombok.html"}],["meta",{"property":"og:site_name","content":"Cafe Babe"}],["meta",{"property":"og:title","content":"lombok的使用"}],["meta",{"property":"og:description","content":"lombok 是一个 java 库，它会自动插入您的编辑器和构建工具，为您的 Java 增添趣味。 再也不用编写另一个 getter 或 equals 方法了 只需一个注释，您的类就拥有了一个功能齐全的构建器，自动化了您的日志记录变量等等。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-09T09:37:40.000Z"}],["meta",{"property":"article:author","content":"Cafe Babe"}],["meta",{"property":"article:tag","content":"开发示例"}],["meta",{"property":"article:published_time","content":"2024-05-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-09T09:37:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"lombok的使用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-07T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-09T09:37:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cafe Babe\\",\\"url\\":\\"https://gitee.com/z517890027\\"}]}"]]},"headers":[{"level":2,"title":"一、@onX","slug":"一、-onx","link":"#一、-onx","children":[]},{"level":2,"title":"二、@Delegate","slug":"二、-delegate","link":"#二、-delegate","children":[]},{"level":2,"title":"三、@Cleanup","slug":"三、-cleanup","link":"#三、-cleanup","children":[]},{"level":2,"title":"四、@Singular 和 @Builder 组合","slug":"四、-singular-和-builder-组合","link":"#四、-singular-和-builder-组合","children":[]},{"level":2,"title":"五、@With","slug":"五、-with","link":"#五、-with","children":[]},{"level":2,"title":"六、结束语","slug":"六、结束语","link":"#六、结束语","children":[]}],"git":{"createdTime":1715238101000,"updatedTime":1715247460000,"contributors":[{"name":"Cafe Babe","email":"517890027@qq.com","commits":2}]},"readingTime":{"minutes":4.53,"words":1359},"filePathRelative":"posts/backend/lombok.md","localizedDate":"2024年5月7日","excerpt":"<p><a href=\\"https://projectlombok.org/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">lombok</a> 是一个 java 库，它会自动插入您的编辑器和构建工具，为您的 Java 增添趣味。</p>\\n<p>再也不用编写另一个 getter 或 equals 方法了</p>\\n<p>只需一个注释，您的类就拥有了一个功能齐全的构建器，自动化了您的日志记录变量等等。</p>\\n","autoDesc":true}');export{f as comp,w as data};
