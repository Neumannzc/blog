import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,b as e,d as t,o as p}from"./app-C5h456xr.js";const l={};function c(i,n){return p(),s("div",null,[e(" more "),n[0]||(n[0]=t(`<h2 id="_8-​1-为什么要用-redis" tabindex="-1"><a class="header-anchor" href="#_8-​1-为什么要用-redis"><span>8.​1 为什么要用 Redis</span></a></h2><ul><li><p>​高性能：基于内存的数据结构，支持高并发读写（单线程模型）。</p></li><li><p>​持久化：支持 RDB/AOF 持久化机制，避免数据丢失。</p></li><li><p>​分布式支持：天然支持分布式环境，适合微服务架构。</p></li><li><p>​丰富的数据结构：支持 String、Hash、List、Set 等数据类型，满足复杂业务场景。</p></li></ul><h2 id="_8-​2-为什么要用-spring-cache" tabindex="-1"><a class="header-anchor" href="#_8-​2-为什么要用-spring-cache"><span>8.​2 为什么要用 Spring Cache</span></a></h2><ul><li><p>​简化缓存逻辑：Spring Cache 提供统一的注解（如 @Cacheable, @CacheEvict），无需手动管理缓存操作。</p></li><li><p>​支持多缓存实现：可无缝集成 Redis、Ehcache、Caffeine 等缓存工具，通过配置切换底层缓存。</p></li><li><p>​声明式编程：开发者只需关注业务逻辑，无需关心缓存的底层实现细节。</p></li></ul><h2 id="_8-3-​spring-cache-redis-的典型使用场景" tabindex="-1"><a class="header-anchor" href="#_8-3-​spring-cache-redis-的典型使用场景"><span>8.3 ​Spring Cache + Redis 的典型使用场景</span></a></h2><ul><li><p>​高频数据访问：如用户信息、商品详情等静态数据的缓存。</p></li><li><p>​热点数据隔离：秒杀场景下的库存、优惠券等热点资源防击穿。</p></li><li><p>​分布式锁：利用 Redis 的原子操作实现分布式锁（如 Redisson）。</p></li><li><p>​会话共享：在无状态服务中集中管理用户 Session。</p></li></ul><h2 id="_8-4-​spring-cache-redis-的使用" tabindex="-1"><a class="header-anchor" href="#_8-4-​spring-cache-redis-的使用"><span>8.4 ​Spring Cache + Redis 的使用</span></a></h2><h3 id="_8-4-​1-添加依赖" tabindex="-1"><a class="header-anchor" href="#_8-4-​1-添加依赖"><span>8.4.​1 添加依赖</span></a></h3><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- Spring Boot Starter Cache --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- Spring Boot Starter Data Redis --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-4-​2-启用缓存支持" tabindex="-1"><a class="header-anchor" href="#_8-4-​2-启用缓存支持"><span>8.4.​2 启用缓存支持</span></a></h3><ul><li>在 Spring Boot 主类上添加 @EnableCaching 注解：</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableCaching</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-4-​3-配置-redis" tabindex="-1"><a class="header-anchor" href="#_8-4-​3-配置-redis"><span>8.4.​3 配置 Redis</span></a></h3><ul><li>在 application.properties 中配置 Redis 连接：</li></ul><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token value attr-value">localhost</span>
<span class="token key attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token value attr-value">6379</span>
<span class="token key attr-name">spring.redis.password</span><span class="token punctuation">=</span>
<span class="token key attr-name">spring.redis.database</span><span class="token punctuation">=</span><span class="token value attr-value">0</span>
<span class="token key attr-name">spring.cache.type</span><span class="token punctuation">=</span><span class="token value attr-value">redis # 明确指定使用 Redis 作为缓存</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-4-​4-使用缓存注解" tabindex="-1"><a class="header-anchor" href="#_8-4-​4-使用缓存注解"><span>8.4.​4 使用缓存注解</span></a></h3><h4 id="_8-4-4-1-查询缓存-cacheable-​" tabindex="-1"><a class="header-anchor" href="#_8-4-4-1-查询缓存-cacheable-​"><span>8.4.4.1 查询缓存（@Cacheable）​</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 模拟从数据库查询</span>
        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>value：缓存名称空间（如 &quot;users&quot;）。</li><li>key：缓存键（动态参数用 # 占位符）。</li></ul><h4 id="_8-4-4-2-更新缓存-cacheput-​" tabindex="-1"><a class="header-anchor" href="#_8-4-4-2-更新缓存-cacheput-​"><span>8.4.4.2 更新缓存（@CachePut）​</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#user.id&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>直接更新缓存，不依赖旧值。</li></ul><h4 id="_8-4-4-3-删除缓存-cacheevict-​" tabindex="-1"><a class="header-anchor" href="#_8-4-4-3-删除缓存-cacheevict-​"><span>8.4.4.3 删除缓存（@CacheEvict）​</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#id&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    userRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-4-4-4-批量操作" tabindex="-1"><a class="header-anchor" href="#_8-4-4-4-批量操作"><span>8.4.4.4 批量操作</span></a></h4><ul><li>可通过 @Caching 组合多个注解：</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Caching</span><span class="token punctuation">(</span>
    cacheable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    evict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span><span class="token string">&quot;logs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 业务逻辑...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-​5-自定义缓存-key-和-ttl" tabindex="-1"><a class="header-anchor" href="#_8-​5-自定义缓存-key-和-ttl"><span>8.​5 自定义缓存 Key 和 TTL</span></a></h2><h3 id="_8-​5-1-​自定义-key-生成器" tabindex="-1"><a class="header-anchor" href="#_8-​5-1-​自定义-key-生成器"><span>8.​5.1 ​自定义 Key 生成器</span></a></h3><ul><li>实现 KeyGenerator 接口：</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomKeyGenerator</span> <span class="token keyword">implements</span> <span class="token class-name">KeyGenerator</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        key<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> param <span class="token operator">:</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            key<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> key<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-​5-2-在缓存注解中引用" tabindex="-1"><a class="header-anchor" href="#_8-​5-2-在缓存注解中引用"><span>8.​5.2 在缓存注解中引用：</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> keyGenerator <span class="token operator">=</span> <span class="token string">&quot;customKeyGenerator&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserByName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-​5-3-​设置缓存过期时间-ttl-​" tabindex="-1"><a class="header-anchor" href="#_8-​5-3-​设置缓存过期时间-ttl-​"><span>8.​5.3 ​设置缓存过期时间（TTL）​</span></a></h3><h4 id="_8-5-3-1-全局配置" tabindex="-1"><a class="header-anchor" href="#_8-5-3-1-全局配置"><span>8.5.3.1 全局配置</span></a></h4><ul><li>在 application.properties 中设置默认 TTL：</li></ul><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.redis.cache.default-ttl</span><span class="token punctuation">=</span><span class="token value attr-value">3600 # 单位：秒</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_8-5-3-2-局部配置" tabindex="-1"><a class="header-anchor" href="#_8-5-3-2-局部配置"><span>8.5.3.2 局部配置</span></a></h4><ul><li>在 @Cacheable 注解中指定 timeToLive：</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#id&quot;</span><span class="token punctuation">,</span> timeToLive <span class="token operator">=</span> <span class="token number">3600</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-​6-实现原理" tabindex="-1"><a class="header-anchor" href="#_8-​6-实现原理"><span>8.​6 实现原理</span></a></h2><ul><li><p>​Spring Cache 抽象层</p><ul><li>​<strong>CacheManager</strong>：管理所有缓存实例（如 RedisCacheManager）。</li><li>​<strong>Cache</strong>：定义缓存操作（如 get, put, evict）。</li><li>​<strong>CacheResolver</strong>：动态解析缓存名称和 Key。</li></ul></li><li><p>​Redis 缓存实现</p><ul><li>​<strong>RedisTemplate</strong>：Spring Data Redis 提供的模板类，封装了 Redis 原生操作。</li><li>​<strong>RedisCacheManager</strong>：自动将 Spring Cache 注解映射为 Redis 命令。</li></ul></li></ul><h2 id="_8-​7-注意事项" tabindex="-1"><a class="header-anchor" href="#_8-​7-注意事项"><span>8.​7 注意事项</span></a></h2><h3 id="_8-7-1-缓存穿透" tabindex="-1"><a class="header-anchor" href="#_8-7-1-缓存穿透"><span>8.7.1 缓存穿透</span></a></h3><ul><li>​问题：查询不存在的数据导致大量请求打到数据库。</li><li>​解决方案： <ul><li>使用布隆过滤器（Bloom Filter）过滤无效 Key。</li><li>在缓存中存储空值（@Cacheable 默认返回 null）。</li></ul></li></ul><h3 id="_8-7-2-缓存雪崩" tabindex="-1"><a class="header-anchor" href="#_8-7-2-缓存雪崩"><span>8.7.2 缓存雪崩</span></a></h3><ul><li>​问题：缓存 Key 过期时间集中失效，导致瞬时流量冲击。</li><li>​解决方案： <ul><li>随机化缓存 TTL（如 1-5 秒随机）。</li><li>使用 Redis 的 SCAN 代替 KEYS 命令遍历缓存。</li></ul></li></ul><h3 id="_8-7-3-缓存击穿" tabindex="-1"><a class="header-anchor" href="#_8-7-3-缓存击穿"><span>8.7.3 缓存击穿</span></a></h3><ul><li>​问题：热点 Key 被恶意用户反复请求，导致数据库压力过大。</li><li>​解决方案： <ul><li>使用互斥锁（Redisson 的 RLock）。</li><li>本地缓存 + 二次验证。</li></ul></li></ul><h2 id="_8-​8-示例场景-商品库存服务" tabindex="-1"><a class="header-anchor" href="#_8-​8-示例场景-商品库存服务"><span>8.​8 示例场景：商品库存服务</span></a></h2><ul><li>​业务需求 <ul><li>用户下单时减少商品库存，需保证库存扣减的原子性。</li></ul></li></ul><p>​实现代码</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StockService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;stocks&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#productId&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getStock</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>productId<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">?</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Transactional</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">decreaseStock</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用 Lua 脚本保证原子性</span>
        <span class="token class-name">String</span> script <span class="token operator">=</span> <span class="token string">&quot;if redis.call(&#39;get&#39;, KEYS[1]) &gt;= ARGV[1] then &quot;</span> <span class="token operator">+</span>
                       <span class="token string">&quot;   redis.call(&#39;decrby&#39;, KEYS[1], ARGV[1]) &quot;</span> <span class="token operator">+</span>
                       <span class="token string">&quot;   return 1 &quot;</span> <span class="token operator">+</span>
                       <span class="token string">&quot;else &quot;</span> <span class="token operator">+</span>
                       <span class="token string">&quot;   return 0 &quot;</span> <span class="token operator">+</span>
                       <span class="token string">&quot;end&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">Long</span> result <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>
            <span class="token punctuation">(</span><span class="token class-name">RedisCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> connection <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> redisScript <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
                redisScript<span class="token punctuation">.</span><span class="token function">setArgs</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> redisScript<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> result <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>​关键点：通过 Redis 的 Lua 脚本保证库存扣减的原子性，避免超卖。</li></ul><h2 id="_8-9-总结" tabindex="-1"><a class="header-anchor" href="#_8-9-总结"><span>8.9 总结</span></a></h2><ul><li>​Spring Cache：简化缓存操作，与业务解耦。</li><li>​Redis：提供高性能、高可用的分布式缓存支持。</li><li>​组合优势：适用于高并发、大数据量的场景，提升系统响应速度和稳定性</li></ul>`,56))])}const r=a(l,[["render",c],["__file","功能点八.html.vue"]]),d=JSON.parse('{"path":"/posts/project/sky/function/%E5%8A%9F%E8%83%BD%E7%82%B9%E5%85%AB.html","title":"8 Redis和Spring Cache的使用","lang":"zh-CN","frontmatter":{"title":"8 Redis和Spring Cache的使用","date":"2025-02-18T00:00:00.000Z","icon":"dragon","category":["棠棠外卖"],"tag":["项目总结"],"order":108,"head":[["meta",{"property":"og:url","content":"https://github.com/Neumannzc/blog/blog/posts/project/sky/function/%E5%8A%9F%E8%83%BD%E7%82%B9%E5%85%AB.html"}],["meta",{"property":"og:site_name","content":"Cafe Babe"}],["meta",{"property":"og:title","content":"8 Redis和Spring Cache的使用"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-27T13:21:51.000Z"}],["meta",{"property":"article:author","content":"Cafe Babe"}],["meta",{"property":"article:tag","content":"项目总结"}],["meta",{"property":"article:published_time","content":"2025-02-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-27T13:21:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"8 Redis和Spring Cache的使用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-27T13:21:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cafe Babe\\",\\"url\\":\\"https://gitee.com/z517890027\\"}]}"]]},"headers":[{"level":2,"title":"8.​1 为什么要用 Redis","slug":"_8-​1-为什么要用-redis","link":"#_8-​1-为什么要用-redis","children":[]},{"level":2,"title":"8.​2 为什么要用 Spring Cache","slug":"_8-​2-为什么要用-spring-cache","link":"#_8-​2-为什么要用-spring-cache","children":[]},{"level":2,"title":"8.3 ​Spring Cache + Redis 的典型使用场景","slug":"_8-3-​spring-cache-redis-的典型使用场景","link":"#_8-3-​spring-cache-redis-的典型使用场景","children":[]},{"level":2,"title":"8.4 ​Spring Cache + Redis 的使用","slug":"_8-4-​spring-cache-redis-的使用","link":"#_8-4-​spring-cache-redis-的使用","children":[{"level":3,"title":"8.4.​1 添加依赖","slug":"_8-4-​1-添加依赖","link":"#_8-4-​1-添加依赖","children":[]},{"level":3,"title":"8.4.​2 启用缓存支持","slug":"_8-4-​2-启用缓存支持","link":"#_8-4-​2-启用缓存支持","children":[]},{"level":3,"title":"8.4.​3 配置 Redis","slug":"_8-4-​3-配置-redis","link":"#_8-4-​3-配置-redis","children":[]},{"level":3,"title":"8.4.​4 使用缓存注解","slug":"_8-4-​4-使用缓存注解","link":"#_8-4-​4-使用缓存注解","children":[]}]},{"level":2,"title":"8.​5 自定义缓存 Key 和 TTL","slug":"_8-​5-自定义缓存-key-和-ttl","link":"#_8-​5-自定义缓存-key-和-ttl","children":[{"level":3,"title":"8.​5.1 ​自定义 Key 生成器","slug":"_8-​5-1-​自定义-key-生成器","link":"#_8-​5-1-​自定义-key-生成器","children":[]},{"level":3,"title":"8.​5.2 在缓存注解中引用：","slug":"_8-​5-2-在缓存注解中引用","link":"#_8-​5-2-在缓存注解中引用","children":[]},{"level":3,"title":"8.​5.3 ​设置缓存过期时间（TTL）​","slug":"_8-​5-3-​设置缓存过期时间-ttl-​","link":"#_8-​5-3-​设置缓存过期时间-ttl-​","children":[]}]},{"level":2,"title":"8.​6 实现原理","slug":"_8-​6-实现原理","link":"#_8-​6-实现原理","children":[]},{"level":2,"title":"8.​7 注意事项","slug":"_8-​7-注意事项","link":"#_8-​7-注意事项","children":[{"level":3,"title":"8.7.1 缓存穿透","slug":"_8-7-1-缓存穿透","link":"#_8-7-1-缓存穿透","children":[]},{"level":3,"title":"8.7.2 缓存雪崩","slug":"_8-7-2-缓存雪崩","link":"#_8-7-2-缓存雪崩","children":[]},{"level":3,"title":"8.7.3 缓存击穿","slug":"_8-7-3-缓存击穿","link":"#_8-7-3-缓存击穿","children":[]}]},{"level":2,"title":"8.​8 示例场景：商品库存服务","slug":"_8-​8-示例场景-商品库存服务","link":"#_8-​8-示例场景-商品库存服务","children":[]},{"level":2,"title":"8.9 总结","slug":"_8-9-总结","link":"#_8-9-总结","children":[]}],"git":{"createdTime":1740662511000,"updatedTime":1740662511000,"contributors":[{"name":"Cafe Babe","email":"517890027@qq.com","commits":1}]},"readingTime":{"minutes":3.95,"words":1186},"filePathRelative":"posts/project/sky/function/功能点八.md","localizedDate":"2025年2月18日","excerpt":""}');export{r as comp,d as data};
