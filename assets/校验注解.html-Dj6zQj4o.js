import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as t,b as e,d as p,o}from"./app-J_1JG69l.js";const l={};function c(i,n){return o(),s("div",null,[n[0]||(n[0]=t("p",null,"在 Spring Boot 中，@Validated 是用于触发参数校验的注解，通常与 ​​JSR-303/JSR-380​​（Bean Validation）提供的校验注解一起使用。以下是常见的校验注解及其用法：",-1)),e(" more "),n[1]||(n[1]=p(`<h2 id="​1-基本校验注解​​" tabindex="-1"><a class="header-anchor" href="#​1-基本校验注解​​"><span>​1. 基本校验注解​​</span></a></h2><p>这些注解可以直接用于字段、方法参数或方法返回值，结合 @Validated 进行校验。</p><table><thead><tr><th>注解</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>@NotNull</td><td>不能为 null</td><td>@NotNull(message = &quot;用户名不能为空&quot;)</td></tr><tr><td>@NotEmpty</td><td>不能为 null 且不能为空（适用于 String、Collection、Map、Array）</td><td>@NotEmpty(message = &quot;列表不能为空&quot;)</td></tr><tr><td>@NotBlank</td><td>不能为 null 且 trim() 后长度 &gt; 0（仅适用于 String）</td><td>@NotBlank(message = &quot;姓名不能为空&quot;)</td></tr><tr><td>@Null</td><td>必须为 null</td><td>@Null(message = &quot;ID 不能存在&quot;)</td></tr><tr><td>@AssertTrue</td><td>必须为 true</td><td>@AssertTrue(message = &quot;必须同意协议&quot;)</td></tr><tr><td>@AssertFalse</td><td>必须为 false</td><td>@AssertFalse(message = &quot;不能启用&quot;)</td></tr><tr><td>@Past</td><td>必须是过去的时间（Date、LocalDateTime 等）</td><td>@Past(message = &quot;出生日期必须是过去&quot;)</td></tr><tr><td>@Future</td><td>必须是未来的时间</td><td>@Future(message = &quot;截止时间必须是未来&quot;)</td></tr><tr><td>@Pattern(regex)</td><td>必须匹配正则表达式</td><td>@Pattern(regexp = &quot;^[a-zA-Z0-9]+$&quot;, message = &quot;只能包含字母和数字&quot;)</td></tr><tr><td>@Size(min, max)</td><td>字符串/集合/数组的长度范围</td><td>@Size(min = 2, max = 10, message = &quot;长度必须在 2-10 之间&quot;)</td></tr><tr><td>@Length(min, max)</td><td>（Hibernate Validator 扩展）同 @Size</td><td>@Length(min = 2, max = 10)</td></tr><tr><td>@Min(value)</td><td>最小值（适用于 Number）</td><td>@Min(1, message = &quot;年龄不能小于 1&quot;)</td></tr><tr><td>@Max(value)</td><td>最大值（适用于 Number）</td><td>@Max(120, message = &quot;年龄不能超过 120&quot;)</td></tr><tr><td>@DecimalMin(value)</td><td>最小值（适用于 BigDecimal）</td><td>@DecimalMin(&quot;0.01&quot;, message = &quot;金额不能小于 0.01&quot;)</td></tr><tr><td>@DecimalMax(value)</td><td>最大值（适用于 BigDecimal）</td><td>@DecimalMax(&quot;999999.99&quot;)</td></tr><tr><td>@Digits(integer, fraction)</td><td>数字精度（整数位和小数位）</td><td>@Digits(integer = 5, fraction = 2, message = &quot;最多 5 位整数，2 位小数&quot;)</td></tr><tr><td>@Email</td><td>必须是有效的邮箱格式</td><td>@Email(message = &quot;邮箱格式不正确&quot;)</td></tr></tbody></table><h2 id="​​2-分组校验-groups-​​" tabindex="-1"><a class="header-anchor" href="#​​2-分组校验-groups-​​"><span>​​2. 分组校验（groups）​​</span></a></h2><p>可以定义不同的校验规则，并在特定场景下使用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>groups <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">Create</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Update</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;ID 不能为空&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Null</span><span class="token punctuation">(</span>groups <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">Delete</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;删除时不能传 ID&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>groups <span class="token operator">=</span> <span class="token class-name">Create</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;创建时用户名不能为空&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Create</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Update</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Delete</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>​​Controller 使用分组校验​​：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/create&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span><span class="token punctuation">(</span><span class="token class-name">User<span class="token punctuation">.</span>Create</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 只校验 Create 分组的规则</span>
    <span class="token keyword">return</span> <span class="token string">&quot;Created&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/update&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span><span class="token punctuation">(</span><span class="token class-name">User<span class="token punctuation">.</span>Update</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 只校验 Update 分组的规则</span>
    <span class="token keyword">return</span> <span class="token string">&quot;Updated&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="​​3-嵌套对象校验-valid-​​" tabindex="-1"><a class="header-anchor" href="#​​3-嵌套对象校验-valid-​​"><span>​​3. 嵌套对象校验（@Valid）​​</span></a></h2><p>如果对象包含嵌套对象，需要用 @Valid 触发嵌套校验：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@NotNull</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Valid</span>  <span class="token comment">// 触发嵌套校验</span>
    <span class="token annotation punctuation">@NotNull</span>
    <span class="token keyword">private</span> <span class="token class-name">User</span> user<span class="token punctuation">;</span>  <span class="token comment">// User 类也需要校验注解</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>​​Controller 使用​​：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/order&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 会校验 Order 和 User 的所有校验规则</span>
    <span class="token keyword">return</span> <span class="token string">&quot;Order created&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="​​4-自定义校验注解​​" tabindex="-1"><a class="header-anchor" href="#​​4-自定义校验注解​​"><span>​​4. 自定义校验注解​​</span></a></h2><p>如果内置注解不满足需求，可以自定义校验注解： ​​示例：校验 Integer 是否是 0 或 1​​</p><h3 id="_1-定义注解-oneorzero​​" tabindex="-1"><a class="header-anchor" href="#_1-定义注解-oneorzero​​"><span>1. 定义注解 @OneOrZero​​</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span></span><span class="token class-name">Constraint</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span></span><span class="token class-name">Payload</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">PARAMETER</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Constraint</span><span class="token punctuation">(</span>validatedBy <span class="token operator">=</span> <span class="token class-name">OneOrZeroValidator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">OneOrZero</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;值必须是 0 或 1&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">groups</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Payload</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-实现校验逻辑-oneorzerovalidator​​" tabindex="-1"><a class="header-anchor" href="#_2-实现校验逻辑-oneorzerovalidator​​"><span>2. 实现校验逻辑 OneOrZeroValidator​​</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span></span><span class="token class-name">ConstraintValidator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span></span><span class="token class-name">ConstraintValidatorContext</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OneOrZeroValidator</span> <span class="token keyword">implements</span> <span class="token class-name">ConstraintValidator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OneOrZero</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> value<span class="token punctuation">,</span> <span class="token class-name">ConstraintValidatorContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> value <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="​​3-在实体类中使用​​" tabindex="-1"><a class="header-anchor" href="#​​3-在实体类中使用​​"><span>​​3. 在实体类中使用​​</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRequest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@OneOrZero</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;状态必须是 0 或 1&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> status<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="​​5-全局异常处理-controlleradvice-​​" tabindex="-1"><a class="header-anchor" href="#​​5-全局异常处理-controlleradvice-​​"><span>​​5. 全局异常处理（@ControllerAdvice）​​</span></a></h2><p>当校验失败时，Spring 会抛出 MethodArgumentNotValidException，可以通过 @ControllerAdvice 统一处理：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpStatus</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">ResponseEntity</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span></span><span class="token class-name">MethodArgumentNotValidException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ExceptionHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestControllerAdvice</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestControllerAdvice</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleValidationExceptions</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> errors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ex<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFieldErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>error <span class="token operator">-&gt;</span> 
            errors<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> error<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>errors<span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​​返回示例​​：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;用户名不能为空&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;邮箱格式不正确&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="​​6-常见问题​​" tabindex="-1"><a class="header-anchor" href="#​​6-常见问题​​"><span>​​6. 常见问题​​</span></a></h2><p><strong>​​Q1: @Valid 和 @Validated 的区别？​​</strong></p><table><thead><tr><th>注解</th><th>作用</th><th>适用场景</th></tr></thead><tbody><tr><td>@Valid</td><td>触发 JSR-303 校验</td><td>一般用于嵌套对象校验（如 @Valid User user）</td></tr><tr><td>@Validated</td><td>Spring 提供的增强版，支持分组校验</td><td>一般用于 Controller 方法参数校验</td></tr></tbody></table><p><strong>​​Q2: 为什么 @Validated 不生效？​​</strong></p><ul><li>检查是否在 ​​Controller 类或方法参数​​ 上使用了 @Validated。</li><li>确保依赖正确（Spring Boot 默认包含 spring-boot-starter-validation）。</li><li>如果校验的是 List 或 Map，确保使用 @Valid 嵌套校验：</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Request</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Valid</span>  <span class="token comment">// 必须加 @Valid</span>
        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-​​总结​​" tabindex="-1"><a class="header-anchor" href="#_7-​​总结​​"><span>7. ​​总结​​</span></a></h2><table><thead><tr><th>场景</th><th>推荐注解</th></tr></thead><tbody><tr><td>基本校验</td><td>@NotNull, @NotEmpty, @Pattern, @Size</td></tr><tr><td>分组校验</td><td>groups + @Validated</td></tr><tr><td>嵌套校验</td><td>@Valid</td></tr><tr><td>自定义校验</td><td>@Constraint + ConstraintValidator</td></tr><tr><td>全局异常处理</td><td>@ControllerAdvice</td></tr></tbody></table><p><strong>通过合理使用这些注解，可以轻松实现参数校验，提高代码健壮性！ 🚀</strong></p>`,35))])}const d=a(l,[["render",c],["__file","校验注解.html.vue"]]),k=JSON.parse('{"path":"/posts/backend/%E6%A0%A1%E9%AA%8C%E6%B3%A8%E8%A7%A3.html","title":"注解-spring boot中的校验注解","lang":"zh-CN","frontmatter":{"title":"注解-spring boot中的校验注解","date":"2024-05-07T00:00:00.000Z","icon":"dragon","category":["后端"],"tag":["注解"],"order":330,"description":"在 Spring Boot 中，@Validated 是用于触发参数校验的注解，通常与 ​​JSR-303/JSR-380​​（Bean Validation）提供的校验注解一起使用。以下是常见的校验注解及其用法：","head":[["meta",{"property":"og:url","content":"https://github.com/Neumannzc/blog/blog/posts/backend/%E6%A0%A1%E9%AA%8C%E6%B3%A8%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"Cafe Babe"}],["meta",{"property":"og:title","content":"注解-spring boot中的校验注解"}],["meta",{"property":"og:description","content":"在 Spring Boot 中，@Validated 是用于触发参数校验的注解，通常与 ​​JSR-303/JSR-380​​（Bean Validation）提供的校验注解一起使用。以下是常见的校验注解及其用法："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-30T01:20:42.000Z"}],["meta",{"property":"article:author","content":"Cafe Babe"}],["meta",{"property":"article:tag","content":"注解"}],["meta",{"property":"article:published_time","content":"2024-05-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-30T01:20:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"注解-spring boot中的校验注解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-07T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-30T01:20:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cafe Babe\\",\\"url\\":\\"https://gitee.com/z517890027\\"}]}"]]},"headers":[{"level":2,"title":"​1. 基本校验注解​​","slug":"​1-基本校验注解​​","link":"#​1-基本校验注解​​","children":[]},{"level":2,"title":"​​2. 分组校验（groups）​​","slug":"​​2-分组校验-groups-​​","link":"#​​2-分组校验-groups-​​","children":[]},{"level":2,"title":"​​3. 嵌套对象校验（@Valid）​​","slug":"​​3-嵌套对象校验-valid-​​","link":"#​​3-嵌套对象校验-valid-​​","children":[]},{"level":2,"title":"​​4. 自定义校验注解​​","slug":"​​4-自定义校验注解​​","link":"#​​4-自定义校验注解​​","children":[{"level":3,"title":"1. 定义注解 @OneOrZero​​","slug":"_1-定义注解-oneorzero​​","link":"#_1-定义注解-oneorzero​​","children":[]},{"level":3,"title":"2. 实现校验逻辑 OneOrZeroValidator​​","slug":"_2-实现校验逻辑-oneorzerovalidator​​","link":"#_2-实现校验逻辑-oneorzerovalidator​​","children":[]},{"level":3,"title":"​​3. 在实体类中使用​​","slug":"​​3-在实体类中使用​​","link":"#​​3-在实体类中使用​​","children":[]}]},{"level":2,"title":"​​5. 全局异常处理（@ControllerAdvice）​​","slug":"​​5-全局异常处理-controlleradvice-​​","link":"#​​5-全局异常处理-controlleradvice-​​","children":[]},{"level":2,"title":"​​6. 常见问题​​","slug":"​​6-常见问题​​","link":"#​​6-常见问题​​","children":[]},{"level":2,"title":"7. ​​总结​​","slug":"_7-​​总结​​","link":"#_7-​​总结​​","children":[]}],"git":{"createdTime":1745976042000,"updatedTime":1745976042000,"contributors":[{"name":"Cafe Babe","email":"517890027@qq.com","commits":1}]},"readingTime":{"minutes":3.72,"words":1116},"filePathRelative":"posts/backend/校验注解.md","localizedDate":"2024年5月7日","excerpt":"<p>在 Spring Boot 中，@Validated 是用于触发参数校验的注解，通常与 ​​JSR-303/JSR-380​​（Bean Validation）提供的校验注解一起使用。以下是常见的校验注解及其用法：</p>\\n","autoDesc":true}');export{d as comp,k as data};
