import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,b as e,d as p,o}from"./app-Bv_Qqef6.js";const c={};function l(i,n){return o(),a("div",null,[n[0]||(n[0]=t("p",null,"WebSocket 是一种在单个 ​TCP 连接​ 上实现 ​全双工通信​（双向数据传输）的协议，允许服务器主动向客户端推送数据，无需客户端频繁轮询",-1)),e(" more "),n[1]||(n[1]=p(`<h2 id="_9-1-websocker特性" tabindex="-1"><a class="header-anchor" href="#_9-1-websocker特性"><span>9.1 WebSocker特性</span></a></h2><ul><li>特点</li></ul><table><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td>​持久连接​</td><td>一次握手后建立长期连接，减少连接开销。</td></tr><tr><td>​全双工通信​</td><td>客户端和服务器可同时发送消息。</td></tr><tr><td>​低延迟​</td><td>比 HTTP 轮询或长轮询更快，适合实时场景（如实时聊天、股票行情）。</td></tr><tr><td>​协议标准​</td><td>基于 RFC 6455，被主流浏览器和服务器支持（如 Chrome、Firefox、Spring Boot）。</td></tr></tbody></table><ul><li>​WebSocket vs HTTP 轮询</li></ul><table><thead><tr><th>对比项</th><th>WebSocket</th><th>HTTP 轮询/长轮询</th></tr></thead><tbody><tr><td>​连接方式​</td><td>单个 TCP 连接，复用连接。</td><td>每次请求新建连接（或长连接等待响应）。</td></tr><tr><td>​数据传输方向​</td><td>双向实时通信。</td><td>客户端主动发起请求，服务器被动响应。</td></tr><tr><td>​延迟​</td><td>微秒级延迟。</td><td>轮询间隔内存在无数据时的浪费。</td></tr><tr><td>​适用场景​</td><td>实时聊天、在线游戏、直播、通知推送等。</td><td>简单数据查询、非实时场景。</td></tr></tbody></table><h2 id="_9-2-​如何使用-websocket" tabindex="-1"><a class="header-anchor" href="#_9-2-​如何使用-websocket"><span>9.2 ​如何使用 WebSocket</span></a></h2><p>以下以 ​Spring Boot + WebSocket​ 为例，演示服务端和客户端的实现步骤。</p><h3 id="_9-2-​1-服务端实现-spring-boot" tabindex="-1"><a class="header-anchor" href="#_9-2-​1-服务端实现-spring-boot"><span>9.2.​1 服务端实现（Spring Boot）</span></a></h3><h4 id="_9-2-1-1-添加依赖" tabindex="-1"><a class="header-anchor" href="#_9-2-1-1-添加依赖"><span>9.2.1.1 添加依赖</span></a></h4><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-2-1-2-配置-websocket-端" tabindex="-1"><a class="header-anchor" href="#_9-2-1-2-配置-websocket-端"><span>9.2.1.2 配置 WebSocket 端</span></a></h4><ul><li>创建一个配置类，启用 WebSocket 并定义端点：</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableWebSocketMessageBroker</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketMessageBrokerConfigurer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerStompEndpoints</span><span class="token punctuation">(</span><span class="token class-name">StompEndpointRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 注册 STOMP 协议的端点（浏览器兼容）</span>
        registry<span class="token punctuation">.</span><span class="token function">addEndpoint</span><span class="token punctuation">(</span><span class="token string">&quot;/ws&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSockJS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// SockJS 是 WebSocket 的降级方案</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageBroker</span><span class="token punctuation">(</span><span class="token class-name">MessageBrokerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 配置消息代理（内部消息队列）</span>
        registry<span class="token punctuation">.</span><span class="token function">enableSimpleBroker</span><span class="token punctuation">(</span><span class="token string">&quot;/topic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 客户端订阅的主题前缀</span>
        registry<span class="token punctuation">.</span><span class="token function">setApplicationDestinationPrefixes</span><span class="token punctuation">(</span><span class="token string">&quot;/app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 服务端接收消息的前缀</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-2-1-3-创建消息处理控制" tabindex="-1"><a class="header-anchor" href="#_9-2-1-3-创建消息处理控制"><span>9.2.1.3 创建消息处理控制</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketController</span> <span class="token punctuation">{</span>

    <span class="token comment">// 客户端发送消息到服务端（/app/chat）</span>
    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/chat&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@SendTo</span><span class="token punctuation">(</span><span class="token string">&quot;/topic/messages&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 广播消息到所有订阅者</span>
    <span class="token keyword">public</span> <span class="token class-name">ChatMessage</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">ChatMessage</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ChatMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Server&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-2-1-4-实体类-消息格式" tabindex="-1"><a class="header-anchor" href="#_9-2-1-4-实体类-消息格式"><span>9.2.1.4 实体类（消息格式）</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChatMessage</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> sender<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>

    <span class="token comment">// 构造函数、getter/setter 省略...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-2-​2-客户端实现-浏览器-javascript-​" tabindex="-1"><a class="header-anchor" href="#_9-2-​2-客户端实现-浏览器-javascript-​"><span>9.2.​2 客户端实现（浏览器 JavaScript）​</span></a></h3><p>​ <strong>(1) 连接 WebSocket</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 使用 SockJS 连接</span>
<span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SockJS</span><span class="token punctuation">(</span><span class="token string">&#39;/ws&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> stompClient <span class="token operator">=</span> Stomp<span class="token punctuation">.</span><span class="token function">over</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 订阅服务端消息（/topic/messages）</span>
stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&#39;/topic/messages&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;收到消息:&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 发送消息到服务端（/app/chat）</span>
<span class="token keyword">function</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;messageInput&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    stompClient<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>
        <span class="token string">&quot;/app/chat&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
        <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">sender</span><span class="token operator">:</span> <span class="token string">&#39;Client&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> content <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​**(2) HTML 页面**</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>messageInput<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>输入消息...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>发送<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>messages<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.5.1/sockjs.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token comment">// 上述 JavaScript 代码...</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-2-​3-运行效果" tabindex="-1"><a class="header-anchor" href="#_9-2-​3-运行效果"><span>9.2.​3 运行效果</span></a></h3><ul><li>客户端打开页面后，自动连接到服务端的 /ws 端点。</li><li>输入消息并点击发送后，服务端接收消息并通过 @SendTo 广播到所有订阅者。</li><li>所有连接的客户端均会收到实时推送的消息。</li></ul><h2 id="_9-3-​websocket-协议扩展" tabindex="-1"><a class="header-anchor" href="#_9-3-​websocket-协议扩展"><span>9.3 ​WebSocket 协议扩展</span></a></h2><h3 id="_9-3-​1-stomp-协议" tabindex="-1"><a class="header-anchor" href="#_9-3-​1-stomp-协议"><span>9.3.​1 STOMP 协议</span></a></h3><ul><li>​作用：为 WebSocket 提供更高级的消息语义（如消息订阅、事务支持）。</li></ul><p>​常用命令：</p><div class="language-stomp line-numbers-mode" data-ext="stomp" data-title="stomp"><pre class="language-stomp"><code>CONNECT /ws → 建立连接
SEND /app/chat → 发送消息
SUBSCRIBE /topic/messages → 订阅主题
DISCONNECT → 断开连接
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-3-​2-使用-spring-security-加密通信" tabindex="-1"><a class="header-anchor" href="#_9-3-​2-使用-spring-security-加密通信"><span>9.3.​2 使用 Spring Security 加密通信</span></a></h3><ul><li>在 application.properties 中启用 WebSocket 加密：</li></ul><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">server.ssl.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8443</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-4-​常见应用场景" tabindex="-1"><a class="header-anchor" href="#_9-4-​常见应用场景"><span>9.4 ​常见应用场景</span></a></h2><ul><li>​在线聊天室：用户发送消息，所有人实时接收。</li><li>​实时通知：如社交媒体的点赞、评论提醒。</li><li>​股票行情推送：服务器主动推送最新股价数据。</li><li>​多人协作工具：如在线文档的实时编辑同步。</li><li>​游戏联机：玩家操作实时同步到其他客户端。 ​</li></ul><h2 id="_9-5-注意事项" tabindex="-1"><a class="header-anchor" href="#_9-5-注意事项"><span>9.5 注意事项</span></a></h2><ul><li>​跨域问题：需在服务端配置跨域支持：</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@CrossOrigin</span><span class="token punctuation">(</span>origins <span class="token operator">=</span> <span class="token string">&quot;http://localhost:8080&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketController</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>​心跳检测：防止连接因网络问题闲置超时：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>stompClient heartbeat <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    stompClient<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;/app/heartbeat&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>​性能优化：使用二进制消息（如 Protocol Buffers）替代 JSON，减少带宽占用。</li></ul>`,40))])}const d=s(c,[["render",l],["__file","功能点九.html.vue"]]),k=JSON.parse('{"path":"/posts/project/sky/function/%E5%8A%9F%E8%83%BD%E7%82%B9%E4%B9%9D.html","title":"9 WebSocket通信","lang":"zh-CN","frontmatter":{"title":"9 WebSocket通信","date":"2025-02-18T00:00:00.000Z","icon":"dragon","category":["棠棠外卖"],"tag":["项目总结"],"order":109,"description":"WebSocket 是一种在单个 ​TCP 连接​ 上实现 ​全双工通信​（双向数据传输）的协议，允许服务器主动向客户端推送数据，无需客户端频繁轮询","head":[["meta",{"property":"og:url","content":"https://github.com/Neumannzc/blog/blog/posts/project/sky/function/%E5%8A%9F%E8%83%BD%E7%82%B9%E4%B9%9D.html"}],["meta",{"property":"og:site_name","content":"Cafe Babe"}],["meta",{"property":"og:title","content":"9 WebSocket通信"}],["meta",{"property":"og:description","content":"WebSocket 是一种在单个 ​TCP 连接​ 上实现 ​全双工通信​（双向数据传输）的协议，允许服务器主动向客户端推送数据，无需客户端频繁轮询"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-27T13:21:51.000Z"}],["meta",{"property":"article:author","content":"Cafe Babe"}],["meta",{"property":"article:tag","content":"项目总结"}],["meta",{"property":"article:published_time","content":"2025-02-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-27T13:21:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"9 WebSocket通信\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-27T13:21:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cafe Babe\\",\\"url\\":\\"https://gitee.com/z517890027\\"}]}"]]},"headers":[{"level":2,"title":"9.1 WebSocker特性","slug":"_9-1-websocker特性","link":"#_9-1-websocker特性","children":[]},{"level":2,"title":"9.2 ​如何使用 WebSocket","slug":"_9-2-​如何使用-websocket","link":"#_9-2-​如何使用-websocket","children":[{"level":3,"title":"9.2.​1 服务端实现（Spring Boot）","slug":"_9-2-​1-服务端实现-spring-boot","link":"#_9-2-​1-服务端实现-spring-boot","children":[]},{"level":3,"title":"9.2.​2 客户端实现（浏览器 JavaScript）​","slug":"_9-2-​2-客户端实现-浏览器-javascript-​","link":"#_9-2-​2-客户端实现-浏览器-javascript-​","children":[]},{"level":3,"title":"9.2.​3 运行效果","slug":"_9-2-​3-运行效果","link":"#_9-2-​3-运行效果","children":[]}]},{"level":2,"title":"9.3 ​WebSocket 协议扩展","slug":"_9-3-​websocket-协议扩展","link":"#_9-3-​websocket-协议扩展","children":[{"level":3,"title":"9.3.​1 STOMP 协议","slug":"_9-3-​1-stomp-协议","link":"#_9-3-​1-stomp-协议","children":[]},{"level":3,"title":"9.3.​2 使用 Spring Security 加密通信","slug":"_9-3-​2-使用-spring-security-加密通信","link":"#_9-3-​2-使用-spring-security-加密通信","children":[]}]},{"level":2,"title":"9.4 ​常见应用场景","slug":"_9-4-​常见应用场景","link":"#_9-4-​常见应用场景","children":[]},{"level":2,"title":"9.5 注意事项","slug":"_9-5-注意事项","link":"#_9-5-注意事项","children":[]}],"git":{"createdTime":1740662511000,"updatedTime":1740662511000,"contributors":[{"name":"Cafe Babe","email":"517890027@qq.com","commits":1}]},"readingTime":{"minutes":3.33,"words":1000},"filePathRelative":"posts/project/sky/function/功能点九.md","localizedDate":"2025年2月18日","excerpt":"<p>WebSocket 是一种在单个 ​TCP 连接​ 上实现 ​全双工通信​（双向数据传输）的协议，允许服务器主动向客户端推送数据，无需客户端频繁轮询</p>\\n","autoDesc":true}');export{d as comp,k as data};
