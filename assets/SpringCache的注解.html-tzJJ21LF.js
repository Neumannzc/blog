import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as p,b as o,d as c,e as a,f as l,w as i,r as u,o as r}from"./app-Bv_Qqef6.js";const d={};function k(v,n){const s=u("RouteLink");return r(),e("div",null,[p("p",null,[n[1]||(n[1]=a("对于Spring Cache 和 Redis 的使用步骤, 可以查看 ")),l(s,{to:"/posts/project/sky/function/%E5%8A%9F%E8%83%BD%E7%82%B9%E5%85%AB.html"},{default:i(()=>n[0]||(n[0]=[a("Redis 和 Spring Cache 的使用")])),_:1})]),o(" more "),n[2]||(n[2]=c(`<h2 id="_1-cacheable-查询缓存" tabindex="-1"><a class="header-anchor" href="#_1-cacheable-查询缓存"><span>1. @Cacheable：查询缓存</span></a></h2><p><strong>​作用</strong> 当方法被调用时，先检查缓存中是否存在对应数据，存在则直接返回；不存在则执行方法并将结果存入缓存。</p><p><strong>​核心参数</strong></p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>value</td><td>缓存名称空间（如 &quot;users&quot;），不同 Service 可以复用相同名称隔离数据。</td></tr><tr><td>key</td><td>缓存键，默认为方法参数组合（如 #id）。支持 SpEL 表达式。</td></tr><tr><td>keyGenerator</td><td>自定义 Key 生成器类名（实现 KeyGenerator 接口）。</td></tr><tr><td>condition</td><td>缓存条件（SpEL 表达式），满足条件时才缓存结果。</td></tr><tr><td>unless</td><td>反条件（SpEL 表达式），满足时不缓存结果。</td></tr><tr><td>cacheNames</td><td>明确指定多个缓存名称（如 &quot;users&quot;, &quot;userCache&quot;）。</td></tr></tbody></table><p><strong>​代码示例</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#id&quot;</span><span class="token punctuation">,</span> unless <span class="token operator">=</span> <span class="token string">&quot;#result == null&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 查询数据库</span>
    <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>​unless：当查询结果为 null 时不缓存（避免缓存空值占用空间）。</li></ul><h2 id="​2-cacheput-更新缓存" tabindex="-1"><a class="header-anchor" href="#​2-cacheput-更新缓存"><span>​2. @CachePut：更新缓存</span></a></h2><p><strong>​作用</strong> 无论缓存是否存在，都会执行方法并将结果更新到缓存中（不依赖旧值）。</p><p><strong>​核心参数</strong></p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>value</td><td>缓存名称空间</td></tr><tr><td>key</td><td>缓存键</td></tr></tbody></table><p><strong>​代码示例</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#user.id&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>​适用场景：数据更新后必须同步更新缓存（如用户信息修改）。</li></ul><h2 id="​3-cacheevict-删除缓存" tabindex="-1"><a class="header-anchor" href="#​3-cacheevict-删除缓存"><span>​3. @CacheEvict：删除缓存</span></a></h2><p><strong>​作用</strong> 从缓存中移除指定键的数据。</p><p><strong>​核心参数</strong></p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>value</td><td>缓存名称空间</td></tr><tr><td>key</td><td>要删除的缓存键</td></tr></tbody></table><p><strong>​代码示例</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#id&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    userRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="​4-caching-组合缓存操作" tabindex="-1"><a class="header-anchor" href="#​4-caching-组合缓存操作"><span>​4. @Caching：组合缓存操作</span></a></h2><p><strong>​作用</strong> 在一个方法上同时定义多个缓存行为（如 @Cacheable + @CacheEvict）。</p><p><strong>​代码示例</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Caching</span><span class="token punctuation">(</span>
    cacheable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    evict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span><span class="token string">&quot;logs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 添加用户并记录日志</span>
    logService<span class="token punctuation">.</span><span class="token function">addLog</span><span class="token punctuation">(</span><span class="token string">&quot;User created: &quot;</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="​5-cacheable-的高级用法" tabindex="-1"><a class="header-anchor" href="#​5-cacheable-的高级用法"><span>​5. @Cacheable 的高级用法</span></a></h2><p><strong>​自定义 Key 生成器</strong> 实现 KeyGenerator 接口并绑定到注解：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomKeyGenerator</span> <span class="token keyword">implements</span> <span class="token class-name">KeyGenerator</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用自定义 Key</span>
<span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> keyGenerator <span class="token operator">=</span> <span class="token string">&quot;customKeyGenerator&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserByNameAndAge</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Integer</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>​动态 Key 和条件</strong> 使用 SpEL 表达式动态生成键和条件：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;orders&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#user.id + &#39;_&#39; + #productId&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;orders&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#user.name&quot;</span><span class="token punctuation">,</span> condition <span class="token operator">=</span> <span class="token string">&quot;#user.isAdmin()&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Order</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">,</span> <span class="token class-name">Product</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="​6-refreshscope-热更新缓存" tabindex="-1"><a class="header-anchor" href="#​6-refreshscope-热更新缓存"><span>​6. @RefreshScope：热更新缓存</span></a></h2><p><strong>​作用</strong> 结合 Spring Cloud 的 @RefreshScope 实现缓存自动刷新（需集成 Actuator）。</p><p><strong>​代码示例</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RefreshScope</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${config.example.value}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> exampleValue<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/config&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> exampleValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当配置发生变化时，调用 <code>/actuator/refresh</code> 刷新所有 @RefreshScope 的 Bean。</p><h2 id="​7-其他注解" tabindex="-1"><a class="header-anchor" href="#​7-其他注解"><span>​7. 其他注解</span></a></h2><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>​**@CacheConfig**​</td><td>类级别的缓存配置（替代重复的 value/key 等属性）。</td></tr><tr><td>​**@CacheableUnbound**</td><td>用于 AspectJ 编程（非 Spring AOP）。</td></tr></tbody></table><p><strong>​Spring Cache 执行流程</strong></p><ul><li>方法被调用时，检查缓存中是否存在对应 Key。</li><li>若存在，直接返回缓存值。</li><li>若不存在，执行方法并将结果存入缓存后返回。</li></ul><h2 id="_8-​注意事项" tabindex="-1"><a class="header-anchor" href="#_8-​注意事项"><span>8. ​注意事项</span></a></h2><ul><li><p>​缓存穿透​</p><ul><li>解决方案：缓存空值（unless = &quot;#result == null&quot;）或使用布隆过滤器。</li></ul></li><li><p>​多级缓存策略​</p><ul><li>推荐使用「本地缓存 + 分布式缓存」（如 Caffeine + Redis），减少对 Redis 的直接压力。</li></ul></li><li><p>​事务与缓存一致性​</p><ul><li>更新数据库后必须触发缓存失效（通过 @CacheEvict 或主动删除）。</li></ul></li></ul><h2 id="_9-​示例场景" tabindex="-1"><a class="header-anchor" href="#_9-​示例场景"><span>9. ​示例场景</span></a></h2><p>商品详情页</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;products&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">getProductDetail</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 查询数据库并组装详情数据</span>
        <span class="token keyword">return</span> productRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Product not found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;products&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateProductStock</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">,</span> <span class="token keyword">int</span> stock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 更新库存（分布式锁保证原子性）</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">executeLuaScript</span><span class="token punctuation">(</span>updateStockScript<span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> stock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,43))])}const g=t(d,[["render",k],["__file","SpringCache的注解.html.vue"]]),b=JSON.parse('{"path":"/posts/backend/SpringCache%E7%9A%84%E6%B3%A8%E8%A7%A3.html","title":"Spring Cache的注解","lang":"zh-CN","frontmatter":{"title":"Spring Cache的注解","date":"2024-05-07T00:00:00.000Z","icon":"dragon","category":["后端"],"tag":["框架"],"order":315,"description":"对于Spring Cache 和 Redis 的使用步骤, 可以查看 Redis 和 Spring Cache 的使用","head":[["meta",{"property":"og:url","content":"https://github.com/Neumannzc/blog/blog/posts/backend/SpringCache%E7%9A%84%E6%B3%A8%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"Cafe Babe"}],["meta",{"property":"og:title","content":"Spring Cache的注解"}],["meta",{"property":"og:description","content":"对于Spring Cache 和 Redis 的使用步骤, 可以查看 Redis 和 Spring Cache 的使用"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-27T13:21:51.000Z"}],["meta",{"property":"article:author","content":"Cafe Babe"}],["meta",{"property":"article:tag","content":"框架"}],["meta",{"property":"article:published_time","content":"2024-05-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-27T13:21:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Cache的注解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-07T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-27T13:21:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cafe Babe\\",\\"url\\":\\"https://gitee.com/z517890027\\"}]}"]]},"headers":[{"level":2,"title":"1. @Cacheable：查询缓存","slug":"_1-cacheable-查询缓存","link":"#_1-cacheable-查询缓存","children":[]},{"level":2,"title":"​2. @CachePut：更新缓存","slug":"​2-cacheput-更新缓存","link":"#​2-cacheput-更新缓存","children":[]},{"level":2,"title":"​3. @CacheEvict：删除缓存","slug":"​3-cacheevict-删除缓存","link":"#​3-cacheevict-删除缓存","children":[]},{"level":2,"title":"​4. @Caching：组合缓存操作","slug":"​4-caching-组合缓存操作","link":"#​4-caching-组合缓存操作","children":[]},{"level":2,"title":"​5. @Cacheable 的高级用法","slug":"​5-cacheable-的高级用法","link":"#​5-cacheable-的高级用法","children":[]},{"level":2,"title":"​6. @RefreshScope：热更新缓存","slug":"​6-refreshscope-热更新缓存","link":"#​6-refreshscope-热更新缓存","children":[]},{"level":2,"title":"​7. 其他注解","slug":"​7-其他注解","link":"#​7-其他注解","children":[]},{"level":2,"title":"8. ​注意事项","slug":"_8-​注意事项","link":"#_8-​注意事项","children":[]},{"level":2,"title":"9. ​示例场景","slug":"_9-​示例场景","link":"#_9-​示例场景","children":[]}],"git":{"createdTime":1740662511000,"updatedTime":1740662511000,"contributors":[{"name":"Cafe Babe","email":"517890027@qq.com","commits":1}]},"readingTime":{"minutes":3.08,"words":923},"filePathRelative":"posts/backend/SpringCache的注解.md","localizedDate":"2024年5月7日","excerpt":"<p>对于Spring Cache 和 Redis 的使用步骤, 可以查看 <a href=\\"/blog/posts/project/sky/function/%E5%8A%9F%E8%83%BD%E7%82%B9%E5%85%AB.html\\" target=\\"_blank\\">Redis 和 Spring Cache 的使用</a></p>\\n","autoDesc":true}');export{g as comp,b as data};
