import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,b as e,d as p,o}from"./app-C5h456xr.js";const l={};function c(i,n){return o(),a("div",null,[n[0]||(n[0]=t("p",null,"作为前后端分离项目中常见的开发时间, 定义统一的API响应数据格式, 可以提高开发效率, 降低维护成本, 提升前后端写作的流畅性.",-1)),e(" more "),n[1]||(n[1]=p(`<h2 id="_1-1-标准化响应格式" tabindex="-1"><a class="header-anchor" href="#_1-1-标准化响应格式"><span>1.1 标准化响应格式</span></a></h2><ul><li>前后端协作：前后端开发人员可以基于统一的响应格式进行协作，减少沟通成本。</li><li>一致性：所有API接口返回的数据格式一致，便于前端统一处理。</li></ul><h2 id="_1-2-明确接口状态" tabindex="-1"><a class="header-anchor" href="#_1-2-明确接口状态"><span>1.2 明确接口状态</span></a></h2><ul><li><p>code字段：</p><ul><li>用于表示接口调用的状态（如成功、失败等）。 <ul><li>常见的约定： <ul><li>1：成功</li><li>0：失败</li><li>其他数字：特定错误码（如2表示参数错误，3表示权限不足等）。</li></ul></li></ul></li></ul></li><li><p>msg字段：</p><ul><li>提供详细的错误信息，帮助开发者和用户理解问题。 <ul><li>例如：&quot;参数错误&quot;、&quot;用户未登录&quot;等。</li></ul></li></ul></li></ul><h2 id="_1-3-数据封装" tabindex="-1"><a class="header-anchor" href="#_1-3-数据封装"><span>1.3 数据封装</span></a></h2><ul><li>data字段： <ul><li>用于封装实际的业务数据。</li><li>使用泛型T可以支持不同类型的数据（如对象、列表等）。</li></ul></li></ul><p>示例：</p><ul><li>成功时返回数据：</li></ul><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">&quot;msg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;成功&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;userId&quot;</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>
        <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>失败时返回错误信息：</li></ul><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;msg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;用户未登录&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-4-便于错误处理" tabindex="-1"><a class="header-anchor" href="#_1-4-便于错误处理"><span>1.4 便于错误处理</span></a></h2><ul><li>前端处理： <ul><li>前端可以根据code字段判断接口调用是否成功，并根据msg字段显示错误信息。</li></ul></li></ul><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 成功，处理data</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 显示错误信息</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>日志记录： <ul><li>后端可以根据code和msg记录日志，便于排查问题。</li></ul></li></ul><h2 id="_1-5-扩展性" tabindex="-1"><a class="header-anchor" href="#_1-5-扩展性"><span>1.5 扩展性</span></a></h2><ul><li>支持多种数据类型： <ul><li>使用泛型T可以灵活支持不同的数据类型（如对象、列表、分页数据等）。</li></ul></li><li>支持国际化： <ul><li>msg字段可以根据用户的语言环境返回不同的错误信息。</li></ul></li></ul><h2 id="_1-6-提高代码可维护性" tabindex="-1"><a class="header-anchor" href="#_1-6-提高代码可维护性"><span>1.6 提高代码可维护性</span></a></h2><ul><li>统一处理逻辑： <ul><li>后端可以封装一个通用的响应工具类，避免重复代码。</li></ul></li></ul><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span> <span class="token comment">// 状态码</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>   <span class="token comment">// 错误信息</span>
    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>       <span class="token comment">// 数据</span>

    <span class="token comment">// 成功静态方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span><span class="token string">&quot;成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 失败静态方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Getter和Setter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user/{id}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;用户不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-7-安全性" tabindex="-1"><a class="header-anchor" href="#_1-7-安全性"><span>1.7 安全性</span></a></h2><ul><li><p>隐藏内部细节：</p><ul><li>通过统一的响应格式，可以避免直接暴露后端内部错误信息（如异常堆栈），提高安全性。</li></ul></li><li><p>友好提示：</p><ul><li>msg字段可以提供用户友好的错误提示，而不是直接显示技术性错误。</li></ul></li></ul><h2 id="_1-8-兼容性" tabindex="-1"><a class="header-anchor" href="#_1-8-兼容性"><span>1.8 兼容性</span></a></h2><ul><li><p>支持多种客户端：</p><ul><li>统一的响应格式可以同时支持Web、移动端（Android/iOS）等多种客户端。</li></ul></li><li><p>支持第三方调用：</p><ul><li>如果API需要提供给第三方使用，统一的响应格式可以降低集成成本。</li></ul></li><li><p>示例响应</p></li></ul><p>成功响应</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">&quot;msg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;成功&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;userId&quot;</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>
        <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>失败响应</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;msg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;用户未登录&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分页数据响应</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">&quot;msg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;成功&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;list&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span> <span class="token property">&quot;userId&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> <span class="token property">&quot;userId&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;李四&quot;</span> <span class="token punctuation">}</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">&quot;total&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
        <span class="token property">&quot;page&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token property">&quot;pageSize&quot;</span><span class="token operator">:</span> <span class="token number">10</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34))])}const d=s(l,[["render",c],["__file","功能点一.html.vue"]]),k=JSON.parse('{"path":"/posts/project/sky/function/%E5%8A%9F%E8%83%BD%E7%82%B9%E4%B8%80.html","title":"1 API响应格式","lang":"zh-CN","frontmatter":{"title":"1 API响应格式","date":"2025-02-18T00:00:00.000Z","icon":"dragon","category":["棠棠外卖"],"tag":["项目总结"],"order":101,"description":"作为前后端分离项目中常见的开发时间, 定义统一的API响应数据格式, 可以提高开发效率, 降低维护成本, 提升前后端写作的流畅性.","head":[["meta",{"property":"og:url","content":"https://github.com/Neumannzc/blog/blog/posts/project/sky/function/%E5%8A%9F%E8%83%BD%E7%82%B9%E4%B8%80.html"}],["meta",{"property":"og:site_name","content":"Cafe Babe"}],["meta",{"property":"og:title","content":"1 API响应格式"}],["meta",{"property":"og:description","content":"作为前后端分离项目中常见的开发时间, 定义统一的API响应数据格式, 可以提高开发效率, 降低维护成本, 提升前后端写作的流畅性."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-27T13:21:51.000Z"}],["meta",{"property":"article:author","content":"Cafe Babe"}],["meta",{"property":"article:tag","content":"项目总结"}],["meta",{"property":"article:published_time","content":"2025-02-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-27T13:21:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1 API响应格式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-27T13:21:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cafe Babe\\",\\"url\\":\\"https://gitee.com/z517890027\\"}]}"]]},"headers":[{"level":2,"title":"1.1 标准化响应格式","slug":"_1-1-标准化响应格式","link":"#_1-1-标准化响应格式","children":[]},{"level":2,"title":"1.2 明确接口状态","slug":"_1-2-明确接口状态","link":"#_1-2-明确接口状态","children":[]},{"level":2,"title":"1.3 数据封装","slug":"_1-3-数据封装","link":"#_1-3-数据封装","children":[]},{"level":2,"title":"1.4 便于错误处理","slug":"_1-4-便于错误处理","link":"#_1-4-便于错误处理","children":[]},{"level":2,"title":"1.5 扩展性","slug":"_1-5-扩展性","link":"#_1-5-扩展性","children":[]},{"level":2,"title":"1.6 提高代码可维护性","slug":"_1-6-提高代码可维护性","link":"#_1-6-提高代码可维护性","children":[]},{"level":2,"title":"1.7 安全性","slug":"_1-7-安全性","link":"#_1-7-安全性","children":[]},{"level":2,"title":"1.8 兼容性","slug":"_1-8-兼容性","link":"#_1-8-兼容性","children":[]}],"git":{"createdTime":1740662511000,"updatedTime":1740662511000,"contributors":[{"name":"Cafe Babe","email":"517890027@qq.com","commits":1}]},"readingTime":{"minutes":2.85,"words":854},"filePathRelative":"posts/project/sky/function/功能点一.md","localizedDate":"2025年2月18日","excerpt":"<p>作为前后端分离项目中常见的开发时间, 定义统一的API响应数据格式, 可以提高开发效率, 降低维护成本, 提升前后端写作的流畅性.</p>\\n","autoDesc":true}');export{d as comp,k as data};
