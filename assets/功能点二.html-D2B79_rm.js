import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,b as t,d as p,o as l}from"./app-Dwh_EYxy.js";const i={};function c(o,n){return l(),a("div",null,[n[0]||(n[0]=e("p",null,"作为一种常见的分层设计模式, 将API接受参数, 操作数据库 和 返回数据 分别使用不同的对象, 有以下几个原因和优点:",-1)),t(" more "),n[1]||(n[1]=p(`<h2 id="_2-1-分层清晰-职责分离" tabindex="-1"><a class="header-anchor" href="#_2-1-分层清晰-职责分离"><span>2.1 分层清晰，职责分离</span></a></h2><ul><li><p>DTO（Data Transfer Object）：</p><ul><li>用于API层，接收前端传递的参数。</li><li>职责：封装请求数据，验证数据合法性。</li></ul></li><li><p>Entity：</p><ul><li>用于持久层，与数据库表结构一一对应。</li><li>职责：映射数据库表，操作数据库。</li></ul></li><li><p>VO（View Object）：</p><ul><li><p>用于API层，返回给前端的数据。</p></li><li><p>职责：封装响应数据，隐藏敏感信息。</p></li></ul></li></ul><p>通过分层设计，每个对象都有明确的职责，避免了代码的耦合。</p><h2 id="_2-2-安全性" tabindex="-1"><a class="header-anchor" href="#_2-2-安全性"><span>2.2 安全性</span></a></h2><ul><li><p>DTO：</p><ul><li>可以过滤掉前端传递的不必要或非法字段。</li><li>示例：用户注册时，只接收username和password，忽略其他字段。</li></ul></li><li><p>VO：</p><ul><li>可以隐藏敏感信息（如密码、身份证号等），避免暴露给前端。</li><li>示例：返回用户信息时，只返回username和email，不返回password。</li></ul></li></ul><h2 id="_2-3-灵活性" tabindex="-1"><a class="header-anchor" href="#_2-3-灵活性"><span>2.3 灵活性</span></a></h2><ul><li><p>DTO：</p><ul><li>可以根据不同的API需求定义不同的DTO。</li><li>示例：用户注册和用户登录可能需要不同的字段。</li></ul></li><li><p>VO：</p><ul><li>可以根据前端需求定制返回的数据结构。</li><li>示例：分页查询时，返回分页信息（如total、page、pageSize）和列表数据。</li></ul></li></ul><h2 id="_2-4-避免污染数据库实体" tabindex="-1"><a class="header-anchor" href="#_2-4-避免污染数据库实体"><span>2.4 避免污染数据库实体</span></a></h2><ul><li><p>Entity：</p><ul><li>直接映射数据库表结构，通常包含所有字段。</li><li>如果直接将Entity用于API层，可能会导致以下问题：</li><li>暴露敏感字段（如密码、手机号）。</li><li>返回不必要的字段，增加网络传输开销。</li><li>无法灵活处理复杂的业务逻辑。</li></ul></li><li><p>DTO和VO：</p><ul><li>可以根据业务需求定义字段，避免污染数据库实体。</li></ul></li></ul><h2 id="_2-5-适应不同的业务场景" tabindex="-1"><a class="header-anchor" href="#_2-5-适应不同的业务场景"><span>2.5 适应不同的业务场景</span></a></h2><ul><li><p>DTO：</p><ul><li>可以包含额外的字段或逻辑，用于处理复杂的请求。</li><li>示例：用户注册时，可能需要验证码字段，但数据库中不需要存储验证码。</li></ul></li><li><p>VO：</p><ul><li>可以包含计算字段或格式化后的数据。</li><li>示例：返回用户信息时，计算用户的年龄并格式化日期。</li></ul></li></ul><h2 id="_2-6-提高代码可维护性" tabindex="-1"><a class="header-anchor" href="#_2-6-提高代码可维护性"><span>2.6 提高代码可维护性</span></a></h2><ul><li><p>分层设计：</p><ul><li>每个对象只关注自己的职责，代码更易于理解和维护。</li></ul></li><li><p>减少耦合：</p><ul><li>修改数据库表结构时，只需要调整Entity，不影响API层。</li><li>修改API接口时，只需要调整DTO或VO，不影响数据库操作。</li></ul></li></ul><h2 id="_2-7-示例" tabindex="-1"><a class="header-anchor" href="#_2-7-示例"><span>2.7 示例</span></a></h2><p>DTO（接收参数）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRegisterDTO</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>

    <span class="token comment">// Getter和Setter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Entity（操作数据库）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>

    <span class="token comment">// Getter和Setter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>VO（返回数据）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserVO</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>

    <span class="token comment">// Getter和Setter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Service层</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserRepository</span> userRepository<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">UserVO</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">UserRegisterDTO</span> userRegisterDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// DTO -&gt; Entity</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>userRegisterDTO<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>userRegisterDTO<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span>userRegisterDTO<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 保存到数据库</span>
        userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Entity -&gt; VO</span>
        <span class="token class-name">UserVO</span> userVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userVO<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userVO<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userVO<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> userVO<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Controller层</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/register&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">UserVO</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">UserRegisterDTO</span> userRegisterDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>userRegisterDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24))])}const d=s(i,[["render",c],["__file","功能点二.html.vue"]]),k=JSON.parse('{"path":"/posts/project/sky/function/%E5%8A%9F%E8%83%BD%E7%82%B9%E4%BA%8C.html","title":"2 项目中对象的类型","lang":"zh-CN","frontmatter":{"title":"2 项目中对象的类型","date":"2025-02-18T00:00:00.000Z","icon":"dragon","category":["棠棠外卖"],"tag":["项目总结"],"order":102,"description":"作为一种常见的分层设计模式, 将API接受参数, 操作数据库 和 返回数据 分别使用不同的对象, 有以下几个原因和优点:","head":[["meta",{"property":"og:url","content":"https://github.com/Neumannzc/blog/blog/posts/project/sky/function/%E5%8A%9F%E8%83%BD%E7%82%B9%E4%BA%8C.html"}],["meta",{"property":"og:site_name","content":"Cafe Babe"}],["meta",{"property":"og:title","content":"2 项目中对象的类型"}],["meta",{"property":"og:description","content":"作为一种常见的分层设计模式, 将API接受参数, 操作数据库 和 返回数据 分别使用不同的对象, 有以下几个原因和优点:"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-27T13:21:51.000Z"}],["meta",{"property":"article:author","content":"Cafe Babe"}],["meta",{"property":"article:tag","content":"项目总结"}],["meta",{"property":"article:published_time","content":"2025-02-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-27T13:21:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2 项目中对象的类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-27T13:21:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cafe Babe\\",\\"url\\":\\"https://gitee.com/z517890027\\"}]}"]]},"headers":[{"level":2,"title":"2.1 分层清晰，职责分离","slug":"_2-1-分层清晰-职责分离","link":"#_2-1-分层清晰-职责分离","children":[]},{"level":2,"title":"2.2 安全性","slug":"_2-2-安全性","link":"#_2-2-安全性","children":[]},{"level":2,"title":"2.3 灵活性","slug":"_2-3-灵活性","link":"#_2-3-灵活性","children":[]},{"level":2,"title":"2.4 避免污染数据库实体","slug":"_2-4-避免污染数据库实体","link":"#_2-4-避免污染数据库实体","children":[]},{"level":2,"title":"2.5 适应不同的业务场景","slug":"_2-5-适应不同的业务场景","link":"#_2-5-适应不同的业务场景","children":[]},{"level":2,"title":"2.6 提高代码可维护性","slug":"_2-6-提高代码可维护性","link":"#_2-6-提高代码可维护性","children":[]},{"level":2,"title":"2.7 示例","slug":"_2-7-示例","link":"#_2-7-示例","children":[]}],"git":{"createdTime":1740662511000,"updatedTime":1740662511000,"contributors":[{"name":"Cafe Babe","email":"517890027@qq.com","commits":1}]},"readingTime":{"minutes":2.73,"words":820},"filePathRelative":"posts/project/sky/function/功能点二.md","localizedDate":"2025年2月18日","excerpt":"<p>作为一种常见的分层设计模式, 将API接受参数, 操作数据库 和 返回数据 分别使用不同的对象, 有以下几个原因和优点:</p>\\n","autoDesc":true}');export{d as comp,k as data};
