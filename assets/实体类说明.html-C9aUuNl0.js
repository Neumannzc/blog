import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as e,b as t,d as p,o as c}from"./app-Bv_Qqef6.js";const l={};function o(i,a){return c(),n("div",null,[a[0]||(a[0]=e("p",null,"该篇对实体类的 PO、VO、BO、DO、DAO、DTO、POJO 进行了区分",-1)),t(" more "),a[1]||(a[1]=p(`<h2 id="一、po持久化对象-persistent-object" tabindex="-1"><a class="header-anchor" href="#一、po持久化对象-persistent-object"><span>一、PO持久化对象（Persistent Object）</span></a></h2><p>PO是持久化对象，用于表示数据库中的实体或表的映射</p><p>通常与数据库表的结构和字段对应</p><p>PO的属性对应数据库表的字段，可以进行持久化操作（新增、查询、更新、删除）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 通常与数据库表对应</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserPO</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、vo值对象-value-object" tabindex="-1"><a class="header-anchor" href="#二、vo值对象-value-object"><span>二、VO值对象（Value Object）</span></a></h2><p>VO是值对象，用于封装数据</p><p>通常是不可变的，用于传递数据而不包含业务逻辑</p><p>VO可以用于在不同层之间传递数据，如前端和后端之间，后端的返回的到前端的数据只需要保留必要的字段就可以，将这些必要的字段封装起来就是VO</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 用于展示，例如给前端的用户视图</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserVO</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> display_name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、bo业务对象-business-object" tabindex="-1"><a class="header-anchor" href="#三、bo业务对象-business-object"><span>三、BO业务对象（Business Object）</span></a></h2><p>BO是业务对象，用于封装业务逻辑和操作</p><p>包含与业务相关的方法和属性，用于实现业务规则和操作</p><p>BO通常与领域模型紧密相关，用于表示业务概念和业务流程</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 包含业务逻辑</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserBO</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> username <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>username<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、do数据对象-data-domain-object" tabindex="-1"><a class="header-anchor" href="#四、do数据对象-data-domain-object"><span>四、DO数据对象（Data/Domain Object）</span></a></h2><p>DO通常与BO和PO相对应，用于实现领域模型和业务逻辑，用于表示从数据存储中得到的数据</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 这里的DO和PO非常相似</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDO</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、dao数据访问对象-data-access-object" tabindex="-1"><a class="header-anchor" href="#五、dao数据访问对象-data-access-object"><span>五、DAO数据访问对象（Data Access Object）</span></a></h2><p>DAO是数据访问对象，用于封装对数据库的访问操作，也就是我们常说的Dao层</p><p>提供对数据库的增删改查等操作的接口</p><p>DAO可以隐藏底层数据库的具体实现细节，使得业务逻辑层与数据库解耦</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>
    <span class="token class-name">UserPO</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">UserPO</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">UserPO</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserPO</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、dto数据传输对象-data-transfer-object" tabindex="-1"><a class="header-anchor" href="#六、dto数据传输对象-data-transfer-object"><span>六、DTO数据传输对象（Data Transfer Object）</span></a></h2><p>DTO是数据传输对象，用于在不同层之间传输数据</p><p>通常用于优化数据传输的性能和减少网络通信的开销。</p><p>DTO可以封装多个对象的数据，以减少网络请求次数</p><p>如果说VO一般用于前端和后端之后传输数据，那么DTO就是在后端的不同层之间传递数据，例如controller层和service层或者在服务之间结构调用的时候使用DTO</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 用于API或远程服务间的数据传输</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDTO</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="七、pojo普通java对象-plain-old-java-object" tabindex="-1"><a class="header-anchor" href="#七、pojo普通java对象-plain-old-java-object"><span>七、POJO普通Java对象（Plain Old Java Object）</span></a></h2><p>POJO是一个简单的Java对象，没有特定的限制和约束</p><p>是一种普通的Java类，不依赖于特定的框架或接口</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 简单的Java对象，不继承或实现任何特殊的类或接口</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33))])}const u=s(l,[["render",o],["__file","实体类说明.html.vue"]]),v=JSON.parse('{"path":"/posts/backend/%E5%AE%9E%E4%BD%93%E7%B1%BB%E8%AF%B4%E6%98%8E.html","title":"实体类说明","lang":"zh-CN","frontmatter":{"title":"实体类说明","date":"2024-05-07T00:00:00.000Z","icon":"dragon","category":["后端"],"tag":["基础概念"],"order":200,"description":"该篇对实体类的 PO、VO、BO、DO、DAO、DTO、POJO 进行了区分","head":[["meta",{"property":"og:url","content":"https://github.com/Neumannzc/blog/blog/posts/backend/%E5%AE%9E%E4%BD%93%E7%B1%BB%E8%AF%B4%E6%98%8E.html"}],["meta",{"property":"og:site_name","content":"Cafe Babe"}],["meta",{"property":"og:title","content":"实体类说明"}],["meta",{"property":"og:description","content":"该篇对实体类的 PO、VO、BO、DO、DAO、DTO、POJO 进行了区分"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-09T09:37:40.000Z"}],["meta",{"property":"article:author","content":"Cafe Babe"}],["meta",{"property":"article:tag","content":"基础概念"}],["meta",{"property":"article:published_time","content":"2024-05-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-09T09:37:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"实体类说明\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-07T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-09T09:37:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cafe Babe\\",\\"url\\":\\"https://gitee.com/z517890027\\"}]}"]]},"headers":[{"level":2,"title":"一、PO持久化对象（Persistent Object）","slug":"一、po持久化对象-persistent-object","link":"#一、po持久化对象-persistent-object","children":[]},{"level":2,"title":"二、VO值对象（Value Object）","slug":"二、vo值对象-value-object","link":"#二、vo值对象-value-object","children":[]},{"level":2,"title":"三、BO业务对象（Business Object）","slug":"三、bo业务对象-business-object","link":"#三、bo业务对象-business-object","children":[]},{"level":2,"title":"四、DO数据对象（Data/Domain Object）","slug":"四、do数据对象-data-domain-object","link":"#四、do数据对象-data-domain-object","children":[]},{"level":2,"title":"五、DAO数据访问对象（Data Access Object）","slug":"五、dao数据访问对象-data-access-object","link":"#五、dao数据访问对象-data-access-object","children":[]},{"level":2,"title":"六、DTO数据传输对象（Data Transfer Object）","slug":"六、dto数据传输对象-data-transfer-object","link":"#六、dto数据传输对象-data-transfer-object","children":[]},{"level":2,"title":"七、POJO普通Java对象（Plain Old Java Object）","slug":"七、pojo普通java对象-plain-old-java-object","link":"#七、pojo普通java对象-plain-old-java-object","children":[]}],"git":{"createdTime":1715238101000,"updatedTime":1715247460000,"contributors":[{"name":"Cafe Babe","email":"517890027@qq.com","commits":2}]},"readingTime":{"minutes":2.63,"words":789},"filePathRelative":"posts/backend/实体类说明.md","localizedDate":"2024年5月7日","excerpt":"<p>该篇对实体类的 PO、VO、BO、DO、DAO、DTO、POJO 进行了区分</p>\\n","autoDesc":true}');export{u as comp,v as data};
