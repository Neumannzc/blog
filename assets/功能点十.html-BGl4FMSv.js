import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,b as e,d as p,o as c}from"./app-C5h456xr.js";const o={};function l(i,n){return c(),a("div",null,[n[0]||(n[0]=t("p",null,"定时任务（Scheduled Task）是指在特定时间点或按照固定间隔自动执行的任务，无需人工干预",-1)),e(" more "),n[1]||(n[1]=p(`<h2 id="_10-1-常见场景" tabindex="-1"><a class="header-anchor" href="#_10-1-常见场景"><span>10.1 常见场景</span></a></h2><ul><li>​数据清理：定期删除过期数据。</li><li>​消息推送：每天发送用户提醒邮件。</li><li>​系统监控：每小时检查服务健康状态。</li><li>​任务调度：每天凌晨执行批量数据处理。</li></ul><h2 id="_10-2-​spring-中如何实现定时任务" tabindex="-1"><a class="header-anchor" href="#_10-2-​spring-中如何实现定时任务"><span>10.2 ​Spring 中如何实现定时任务</span></a></h2><h3 id="_10-2-​1-使用-scheduled-注解" tabindex="-1"><a class="header-anchor" href="#_10-2-​1-使用-scheduled-注解"><span>10.2.​1 使用 @Scheduled 注解</span></a></h3><p>这是 Spring 最简单的定时任务实现方式，通过注解直接标记要执行的方法。</p><h4 id="_10-2-1-1-启用定时任务支持" tabindex="-1"><a class="header-anchor" href="#_10-2-1-1-启用定时任务支持"><span>10.2.1.1 启用定时任务支持</span></a></h4><p>在 Spring Boot 主类或配置类上添加 <code>@EnableScheduling</code>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableScheduling</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-2-1-2-定义定时任务" tabindex="-1"><a class="header-anchor" href="#_10-2-1-2-定义定时任务"><span>10.2.1.2 定义定时任务</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledTask</span> <span class="token punctuation">{</span>

    <span class="token comment">// 每秒执行一次</span>
    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeFixedRateTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Fixed rate task executed at &quot;</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 每隔 2 秒执行一次（任务完成后开始计时）</span>
    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedDelay <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeFixedDelayTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Fixed delay task executed at &quot;</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 使用 Cron 表达式（每天凌晨 2:00 执行）</span>
    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">&quot;0 0 2 * * ?&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeCronTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Cron task executed at &quot;</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-2-1-3-调度策略对比" tabindex="-1"><a class="header-anchor" href="#_10-2-1-3-调度策略对比"><span>10.2.1.3 调度策略对比</span></a></h4><table><thead><tr><th>策略</th><th>说明</th></tr></thead><tbody><tr><td>fixedRate</td><td>固定频率执行，每次任务完成立即开始下一次（可能重叠）。</td></tr><tr><td>fixedDelay</td><td>固定延迟执行，前一次任务完成后等待指定时间再执行。</td></tr><tr><td>cron</td><td>支持复杂时间表达式（如每天、每月、每周触发）。</td></tr></tbody></table><h3 id="_10-2-​2-使用-taskscheduler-接口" tabindex="-1"><a class="header-anchor" href="#_10-2-​2-使用-taskscheduler-接口"><span>10.2.​2 使用 TaskScheduler 接口</span></a></h3><ul><li>通过编程方式动态调度任务：</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SchedulerConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;taskScheduler&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">TaskScheduler</span> <span class="token function">taskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ThreadPoolTaskScheduler</span> scheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduler<span class="token punctuation">.</span><span class="token function">setPoolSize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置线程池大小</span>
        scheduler<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">&quot;Async-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduler<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> scheduler<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicTask</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">TaskScheduler</span> taskScheduler<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scheduleTask</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">,</span> <span class="token class-name">Date</span> startTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        taskScheduler<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancelTask</span><span class="token punctuation">(</span><span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> future<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>future <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            future<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-​3-高级特性" tabindex="-1"><a class="header-anchor" href="#_10-​3-高级特性"><span>10.​3 高级特性</span></a></h2><h3 id="_10-3-1-异步执行" tabindex="-1"><a class="header-anchor" href="#_10-3-1-异步执行"><span>10.3.1 异步执行</span></a></h3><ul><li>使用 @Async 实现非阻塞定时任务：</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncScheduledTask</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Async</span><span class="token punctuation">(</span><span class="token string">&quot;taskExecutor&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyncTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Async task executed at &quot;</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableAsync</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;taskExecutor&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">taskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ThreadPoolTaskExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-3-2-任务状态管理" tabindex="-1"><a class="header-anchor" href="#_10-3-2-任务状态管理"><span>10.3.2 任务状态管理</span></a></h3><ul><li>通过 ScheduledFuture 控制任务生命周期：</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">&quot;0 0 3 * * ?&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">scheduleCronTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> taskScheduler<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Cron task started...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Cron task completed.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-​4-注意事项" tabindex="-1"><a class="header-anchor" href="#_10-​4-注意事项"><span>10.​4 注意事项</span></a></h2><h3 id="_10-4-1-线程安全" tabindex="-1"><a class="header-anchor" href="#_10-4-1-线程安全"><span>10.4.1 线程安全</span></a></h3><ul><li>避免在定时任务中使用共享可变状态，或通过 synchronized 关键字保证原子性。</li></ul><h3 id="_10-4-2-异常处理" tabindex="-1"><a class="header-anchor" href="#_10-4-2-异常处理"><span>10.4.2 异常处理</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">&quot;0 0 2 * * ?&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleErrorTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 可能出错的逻辑</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;故意抛出异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 记录日志或通知管理员</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Task failed: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-4-3-配置优化" tabindex="-1"><a class="header-anchor" href="#_10-4-3-配置优化"><span>10.4.3 配置优化</span></a></h3><ul><li>在 application.properties 中配置调度器属性：</li></ul><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment"># 设置默认线程池大小</span>
<span class="token key attr-name">spring.task.scheduling.pool.size</span><span class="token punctuation">=</span><span class="token value attr-value">10</span>

<span class="token comment"># 启用任务超时检测</span>
<span class="token key attr-name">spring.task.scheduling.thread-name-prefix</span><span class="token punctuation">=</span><span class="token value attr-value">Async-</span>
<span class="token key attr-name">spring.task.scheduling.shutdown.await-termination-period</span><span class="token punctuation">=</span><span class="token value attr-value">60s</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-5-​示例场景" tabindex="-1"><a class="header-anchor" href="#_10-5-​示例场景"><span>10.5 ​示例场景</span></a></h2><p>每日数据备份</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BackupService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">&quot;0 0 1 * * ?&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 每天凌晨 1:00 执行</span>
    <span class="token annotation punctuation">@TransactionalEventListener</span><span class="token punctuation">(</span>phase <span class="token operator">=</span> <span class="token class-name">TransactionPhase</span><span class="token punctuation">.</span><span class="token constant">AFTER_COMMIT</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dailyBackup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1. 查询当日数据</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Data</span><span class="token punctuation">&gt;</span></span> dataList <span class="token operator">=</span> dataRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2. 导出为 CSV</span>
        <span class="token class-name">String</span> csvContent <span class="token operator">=</span> <span class="token function">convertToCsv</span><span class="token punctuation">(</span>dataList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3. 上传至 S3 或本地磁盘</span>
        fileStorageService<span class="token punctuation">.</span><span class="token function">uploadFile</span><span class="token punctuation">(</span><span class="token string">&quot;backup_&quot;</span> <span class="token operator">+</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.csv&quot;</span><span class="token punctuation">,</span> csvContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 4. 记录日志</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Daily backup completed successfully&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-6-​总结" tabindex="-1"><a class="header-anchor" href="#_10-6-​总结"><span>10.6 ​总结</span></a></h2><ul><li><p>​简单任务：优先使用 @Scheduled 注解。</p></li><li><p>​复杂调度：结合 TaskScheduler 和 ThreadPoolTaskExecutor。</p></li><li><p>​分布式任务：考虑使用 ​Quartz​ 或 ​XXL-JOB​ 等分布式调度框架。</p></li></ul>`,35))])}const k=s(o,[["render",l],["__file","功能点十.html.vue"]]),r=JSON.parse('{"path":"/posts/project/sky/function/%E5%8A%9F%E8%83%BD%E7%82%B9%E5%8D%81.html","title":"10 定时任务的使用","lang":"zh-CN","frontmatter":{"title":"10 定时任务的使用","date":"2025-02-18T00:00:00.000Z","icon":"dragon","category":["棠棠外卖"],"tag":["项目总结"],"order":110,"description":"定时任务（Scheduled Task）是指在特定时间点或按照固定间隔自动执行的任务，无需人工干预","head":[["meta",{"property":"og:url","content":"https://github.com/Neumannzc/blog/blog/posts/project/sky/function/%E5%8A%9F%E8%83%BD%E7%82%B9%E5%8D%81.html"}],["meta",{"property":"og:site_name","content":"Cafe Babe"}],["meta",{"property":"og:title","content":"10 定时任务的使用"}],["meta",{"property":"og:description","content":"定时任务（Scheduled Task）是指在特定时间点或按照固定间隔自动执行的任务，无需人工干预"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-27T13:21:51.000Z"}],["meta",{"property":"article:author","content":"Cafe Babe"}],["meta",{"property":"article:tag","content":"项目总结"}],["meta",{"property":"article:published_time","content":"2025-02-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-27T13:21:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"10 定时任务的使用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-27T13:21:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cafe Babe\\",\\"url\\":\\"https://gitee.com/z517890027\\"}]}"]]},"headers":[{"level":2,"title":"10.1 常见场景","slug":"_10-1-常见场景","link":"#_10-1-常见场景","children":[]},{"level":2,"title":"10.2 ​Spring 中如何实现定时任务","slug":"_10-2-​spring-中如何实现定时任务","link":"#_10-2-​spring-中如何实现定时任务","children":[{"level":3,"title":"10.2.​1 使用 @Scheduled 注解","slug":"_10-2-​1-使用-scheduled-注解","link":"#_10-2-​1-使用-scheduled-注解","children":[]},{"level":3,"title":"10.2.​2 使用 TaskScheduler 接口","slug":"_10-2-​2-使用-taskscheduler-接口","link":"#_10-2-​2-使用-taskscheduler-接口","children":[]}]},{"level":2,"title":"10.​3 高级特性","slug":"_10-​3-高级特性","link":"#_10-​3-高级特性","children":[{"level":3,"title":"10.3.1 异步执行","slug":"_10-3-1-异步执行","link":"#_10-3-1-异步执行","children":[]},{"level":3,"title":"10.3.2 任务状态管理","slug":"_10-3-2-任务状态管理","link":"#_10-3-2-任务状态管理","children":[]}]},{"level":2,"title":"10.​4 注意事项","slug":"_10-​4-注意事项","link":"#_10-​4-注意事项","children":[{"level":3,"title":"10.4.1 线程安全","slug":"_10-4-1-线程安全","link":"#_10-4-1-线程安全","children":[]},{"level":3,"title":"10.4.2 异常处理","slug":"_10-4-2-异常处理","link":"#_10-4-2-异常处理","children":[]},{"level":3,"title":"10.4.3 配置优化","slug":"_10-4-3-配置优化","link":"#_10-4-3-配置优化","children":[]}]},{"level":2,"title":"10.5 ​示例场景","slug":"_10-5-​示例场景","link":"#_10-5-​示例场景","children":[]},{"level":2,"title":"10.6 ​总结","slug":"_10-6-​总结","link":"#_10-6-​总结","children":[]}],"git":{"createdTime":1740662511000,"updatedTime":1740662511000,"contributors":[{"name":"Cafe Babe","email":"517890027@qq.com","commits":1}]},"readingTime":{"minutes":2.76,"words":827},"filePathRelative":"posts/project/sky/function/功能点十.md","localizedDate":"2025年2月18日","excerpt":"<p>定时任务（Scheduled Task）是指在特定时间点或按照固定间隔自动执行的任务，无需人工干预</p>\\n","autoDesc":true}');export{k as comp,r as data};
