import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as s,b as o,d as c,e as a,f as l,r as i,o as u}from"./app-BJPS0yVJ.js";const r={},k={href:"https://mybatis.net.cn/",target:"_blank",rel:"noopener noreferrer"};function d(m,n){const t=i("ExternalLinkIcon");return u(),p("div",null,[s("p",null,[s("a",k,[n[0]||(n[0]=a("MyBatis")),l(t)]),n[1]||(n[1]=a("是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。"))]),o(" more "),n[2]||(n[2]=c(`<h2 id="一、查询姓李的-并且出生日期范围是1993-02-09到1994-04-09的员工" tabindex="-1"><a class="header-anchor" href="#一、查询姓李的-并且出生日期范围是1993-02-09到1994-04-09的员工"><span>一、查询姓李的，并且出生日期范围是1993-02-09到1994-04-09的员工</span></a></h2><p>想要实现的效果</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> 
<span class="token keyword">FROM</span> t_employee 
<span class="token keyword">WHERE</span> 
	DATE_FORMAT<span class="token punctuation">(</span>birthday<span class="token punctuation">,</span><span class="token string">&#39;%Y-%m-%d&#39;</span><span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token string">&#39;1993-02-09&#39;</span> 
  <span class="token operator">AND</span> DATE_FORMAT<span class="token punctuation">(</span>birthday<span class="token punctuation">,</span><span class="token string">&#39;%Y-%m-%d&#39;</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token string">&#39;1994-04-09&#39;</span> 
	<span class="token operator">AND</span> NAME <span class="token operator">LIKE</span> <span class="token string">&#39;李%&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>java端需要这样写</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectByQueryWrapper3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token class-name">QueryWrapper</span> queryWrapper<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	queryWrapper
      <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>&quot;<span class="token function">DATE_FORMAT</span><span class="token punctuation">(</span>birthday<span class="token punctuation">,</span>&#39;<span class="token operator">%</span><span class="token class-name">Y</span><span class="token operator">-</span><span class="token operator">%</span>m<span class="token operator">-</span><span class="token operator">%</span>d&#39;<span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span> 
        and <span class="token function">DATE_FORMAT</span><span class="token punctuation">(</span>birthday<span class="token punctuation">,</span>&#39;<span class="token operator">%</span><span class="token class-name">Y</span><span class="token operator">-</span><span class="token operator">%</span>m<span class="token operator">-</span><span class="token operator">%</span>d&#39;<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>&quot;<span class="token punctuation">,</span>
        <span class="token string">&quot;1993-02-09&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;1994-04-09&quot;</span><span class="token punctuation">)</span>
	    <span class="token punctuation">.</span><span class="token function">likeRight</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;李&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token class-name">List</span> employeeList <span class="token operator">=</span> employeeMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employeeList<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、查询姓李的或者邮箱不为空并且是女性的员工" tabindex="-1"><a class="header-anchor" href="#二、查询姓李的或者邮箱不为空并且是女性的员工"><span>二、查询姓李的或者邮箱不为空并且是女性的员工</span></a></h2><p>想要实现的效果</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_employee
<span class="token keyword">WHERE</span> NAME <span class="token operator">LIKE</span> <span class="token string">&#39;李%&#39;</span> 
      <span class="token operator">OR</span> 
      <span class="token punctuation">(</span>email <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token operator">AND</span> gender <span class="token operator">=</span><span class="token string">&#39;女&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>java端需要这样写</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectByQueryWrapper4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token class-name">QueryWrapper</span> queryWrapper<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	queryWrapper
      <span class="token punctuation">.</span><span class="token function">likeRight</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;李&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>wq<span class="token operator">-&gt;</span>wq<span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;gender&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;女&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token class-name">List</span> employeeList <span class="token operator">=</span> employeeMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employeeList<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、查询姓李的并且邮箱不为空或者是女性的员工" tabindex="-1"><a class="header-anchor" href="#_3、查询姓李的并且邮箱不为空或者是女性的员工"><span>3、查询姓李的并且邮箱不为空或者是女性的员工</span></a></h2><p>想要实现的效果</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_employee
<span class="token keyword">WHERE</span> NAME <span class="token operator">LIKE</span> <span class="token string">&#39;李%&#39;</span>
      <span class="token operator">AND</span>
      <span class="token punctuation">(</span>email <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token operator">OR</span> gender <span class="token operator">=</span><span class="token string">&#39;女&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>java端需要这样写</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectByQueryWrapper5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token class-name">QueryWrapper</span> queryWrapper<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	queryWrapper
      <span class="token punctuation">.</span><span class="token function">likeRight</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;李&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>wq<span class="token operator">-&gt;</span>wq<span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;gender&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;女&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token class-name">List</span> employeeList <span class="token operator">=</span> employeeMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employeeList<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、查询属于编号1-2-3部门的并且薪水小于等于3500的员工-根据年龄从大到小排序显示" tabindex="-1"><a class="header-anchor" href="#_4、查询属于编号1-2-3部门的并且薪水小于等于3500的员工-根据年龄从大到小排序显示"><span>4、查询属于编号1,2,3部门的并且薪水小于等于3500的员工 根据年龄从大到小排序显示</span></a></h2><p>想要实现的效果</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_employee 
<span class="token keyword">WHERE</span> salary<span class="token operator">&lt;=</span><span class="token number">3500</span>
      <span class="token operator">AND</span> departmentId <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> birthday <span class="token keyword">ASC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>java端需要这样写</p>`,19))])}const y=e(r,[["render",d],["__file","Mybatis.html.vue"]]),g=JSON.parse('{"path":"/posts/backend/Mybatis.html","title":"Mybatis","lang":"zh-CN","frontmatter":{"title":"Mybatis","date":"2024-05-10T00:00:00.000Z","icon":"dragon","category":["后端"],"tag":["框架"],"order":301,"description":"MyBatis是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。","head":[["meta",{"property":"og:url","content":"https://github.com/Neumannzc/blog/blog/posts/backend/Mybatis.html"}],["meta",{"property":"og:site_name","content":"Cafe Babe"}],["meta",{"property":"og:title","content":"Mybatis"}],["meta",{"property":"og:description","content":"MyBatis是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-17T01:16:20.000Z"}],["meta",{"property":"article:author","content":"Cafe Babe"}],["meta",{"property":"article:tag","content":"框架"}],["meta",{"property":"article:published_time","content":"2024-05-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-17T01:16:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Mybatis\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-10T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-17T01:16:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cafe Babe\\",\\"url\\":\\"https://gitee.com/z517890027\\"}]}"]]},"headers":[{"level":2,"title":"一、查询姓李的，并且出生日期范围是1993-02-09到1994-04-09的员工","slug":"一、查询姓李的-并且出生日期范围是1993-02-09到1994-04-09的员工","link":"#一、查询姓李的-并且出生日期范围是1993-02-09到1994-04-09的员工","children":[]},{"level":2,"title":"二、查询姓李的或者邮箱不为空并且是女性的员工","slug":"二、查询姓李的或者邮箱不为空并且是女性的员工","link":"#二、查询姓李的或者邮箱不为空并且是女性的员工","children":[]},{"level":2,"title":"3、查询姓李的并且邮箱不为空或者是女性的员工","slug":"_3、查询姓李的并且邮箱不为空或者是女性的员工","link":"#_3、查询姓李的并且邮箱不为空或者是女性的员工","children":[]},{"level":2,"title":"4、查询属于编号1,2,3部门的并且薪水小于等于3500的员工 根据年龄从大到小排序显示","slug":"_4、查询属于编号1-2-3部门的并且薪水小于等于3500的员工-根据年龄从大到小排序显示","link":"#_4、查询属于编号1-2-3部门的并且薪水小于等于3500的员工-根据年龄从大到小排序显示","children":[]}],"git":{"createdTime":1715329817000,"updatedTime":1744852580000,"contributors":[{"name":"Cafe Babe","email":"517890027@qq.com","commits":1}]},"readingTime":{"minutes":1.49,"words":448},"filePathRelative":"posts/backend/Mybatis.md","localizedDate":"2024年5月10日","excerpt":"<p><a href=\\"https://mybatis.net.cn/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">MyBatis</a>是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p>\\n","autoDesc":true}');export{y as comp,g as data};
