import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,b as t,d as p,o as i}from"./app-nWwuVS9F.js";const l={};function c(o,n){return i(),e("div",null,[n[0]||(n[0]=a("p",null,"Sring Boot项目中分为controller, service, mapper三层",-1)),n[1]||(n[1]=a("p",null,"为什么service层需要声明service接口,然后再去实现该接口",-1)),t(" more "),n[2]||(n[2]=p(`<h2 id="_1-为什么需要声明service接口" tabindex="-1"><a class="header-anchor" href="#_1-为什么需要声明service接口"><span>1. 为什么需要声明Service接口</span></a></h2><ul><li><p>面向接口编程</p><ul><li>解耦：通过接口定义服务的行为，具体的实现类可以根据需求变化，而不影响调用方（如Controller）。</li><li>灵活性：可以轻松替换不同的实现类（例如，根据不同的业务场景使用不同的实现）。</li></ul></li><li><p>符合设计原则</p><ul><li>单一职责原则：接口定义职责，实现类负责具体实现，职责分离。</li><li>开闭原则：通过接口扩展新功能时，不需要修改现有代码，只需新增实现类。</li></ul></li><li><p>便于测试</p><ul><li>Mock测试：在单元测试中，可以通过Mock接口来模拟Service的行为，而不需要依赖具体的实现类。</li><li>测试驱动开发（TDD）：先定义接口，再编写测试用例，最后实现功能。</li></ul></li><li><p>多实现类支持</p><ul><li>如果一个Service可能有多种实现（例如，不同的支付方式、不同的算法实现），通过接口可以方便地管理这些实现类。</li><li>在Spring中，可以通过@Qualifier或@Primary注解来指定使用哪个实现类。</li></ul></li><li><p>代码可读性和维护性</p><ul><li>接口清晰地定义了Service的功能，便于其他开发者理解和使用。</li><li>实现类可以专注于业务逻辑的实现，而不需要关心接口的定义。</li></ul></li></ul><h2 id="_2-优点" tabindex="-1"><a class="header-anchor" href="#_2-优点"><span>2. 优点</span></a></h2><ul><li><p>解耦和灵活性</p><ul><li>接口与实现分离，便于扩展和维护。</li><li>可以轻松替换或增加新的实现类。</li></ul></li><li><p>便于测试</p><ul><li>接口可以方便地进行Mock测试，提高单元测试的效率。</li></ul></li><li><p>符合设计模式</p><ul><li>符合面向对象设计原则（如单一职责、开闭原则等）。</li></ul></li><li><p>多实现支持</p><ul><li>支持一个接口多个实现，适用于复杂的业务场景。</li></ul></li><li><p>代码清晰</p><ul><li>接口定义了服务的契约，使代码结构更清晰。</li></ul></li></ul><h2 id="_3-缺点" tabindex="-1"><a class="header-anchor" href="#_3-缺点"><span>3. 缺点</span></a></h2><ul><li><p>增加代码量</p><ul><li>需要额外编写接口文件，增加了代码量。</li><li>对于简单的业务场景，可能显得冗余。</li></ul></li><li><p>开发效率降低</p><ul><li>对于小型项目或简单业务，直接编写实现类可能更高效。</li></ul></li><li><p>过度设计</p><ul><li>如果项目规模较小，或者Service的功能非常简单，使用接口可能显得“过度设计”。</li></ul></li><li><p>学习成本</p><ul><li>对于新手开发者，理解接口和实现的关系可能需要一定的学习成本。</li></ul></li></ul><h2 id="_4-适用场景" tabindex="-1"><a class="header-anchor" href="#_4-适用场景"><span>4. 适用场景</span></a></h2><ul><li><p>适合使用接口的场景</p><ul><li>大型项目，需要清晰的代码结构和良好的扩展性。</li><li>需要支持多种实现（如不同的支付方式、算法等）。</li><li>需要频繁进行单元测试或Mock测试。</li></ul></li><li><p>不适合使用接口的场景</p><ul><li>小型项目或功能简单的Service。</li><li>确定不会有多种实现的场景。</li><li>开发时间紧张，需要快速实现功能。</li></ul></li></ul><p>示例</p><ol><li>定义接口</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token class-name">User</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>实现接口</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>在Controller中使用</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结"><span>5. 总结</span></a></h2><table><thead><tr><th>方面</th><th>使用接口</th><th>不使用接口</th></tr></thead><tbody><tr><td>代码结构</td><td>更清晰，符合设计原则</td><td>更简单，适合小型项目</td></tr><tr><td>扩展性</td><td>支持多实现，易于扩展</td><td>扩展性较差</td></tr><tr><td>测试</td><td>便于Mock测试</td><td>测试时需要依赖具体实现</td></tr><tr><td>代码量</td><td>增加接口文件，代码量较多</td><td>代码量较少</td></tr><tr><td>适用场景</td><td>大型项目、复杂业务、需要多实现的场景</td><td>小型项目、简单业务、不需要多实现的场景</td></tr></tbody></table><p>在实际开发中，是否使用接口需要根据项目规模、业务复杂度和团队习惯来决定。对于大多数Spring Boot项目，使用接口是一种良好的实践，尤其是在需要扩展性和可测试性的场景下。</p><h2 id="_6-service多实现类的使用" tabindex="-1"><a class="header-anchor" href="#_6-service多实现类的使用"><span>6. service多实现类的使用</span></a></h2><p>在Spring Boot中，如果一个接口有多个实现类（例如<code>WxPayService</code>和<code>AliPayService</code>都实现了<code>PayService</code>接口），直接使用<code>@Autowired</code>自动注入会导致Spring无法确定应该注入哪个实现类，从而抛出<code>NoUniqueBeanDefinitionException</code>异常</p><p>为了解决这个问题，Spring提供了多种方式来明确指定使用哪个实现类。</p><h3 id="_6-1-qualifier注解" tabindex="-1"><a class="header-anchor" href="#_6-1-qualifier注解"><span>6.1. @Qualifier注解</span></a></h3><p><code>@Qualifier</code>注解可以明确指定要注入的Bean名称。</p><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">&quot;wxPayService&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WxPayService</span> <span class="token keyword">implements</span> <span class="token class-name">PayService</span> <span class="token punctuation">{</span>
    <span class="token comment">// 微信支付实现</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">&quot;aliPayService&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliPayService</span> <span class="token keyword">implements</span> <span class="token class-name">PayService</span> <span class="token punctuation">{</span>
    <span class="token comment">// 支付宝支付实现</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Controller中使用@Qualifier指定具体的实现类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/pay&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;wxPayService&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 指定注入微信支付实现</span>
    <span class="token keyword">private</span> <span class="token class-name">PayService</span> wxPayService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;aliPayService&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 指定注入支付宝支付实现</span>
    <span class="token keyword">private</span> <span class="token class-name">PayService</span> aliPayService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/wx&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">wxPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> wxPayService<span class="token punctuation">.</span><span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/ali&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">aliPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> aliPayService<span class="token punctuation">.</span><span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-primary注解" tabindex="-1"><a class="header-anchor" href="#_6-2-primary注解"><span>6.2 @Primary注解</span></a></h3><p><code>@Primary</code>注解可以指定一个默认的实现类。当有多个实现类时，Spring会优先注入被标记为<code>@Primary</code>的Bean。</p><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@Primary</span> <span class="token comment">// 标记为默认实现</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WxPayService</span> <span class="token keyword">implements</span> <span class="token class-name">PayService</span> <span class="token punctuation">{</span>
    <span class="token comment">// 微信支付实现</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliPayService</span> <span class="token keyword">implements</span> <span class="token class-name">PayService</span> <span class="token punctuation">{</span>
    <span class="token comment">// 支付宝支付实现</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Controller中直接使用<code>@Autowired</code>时，会默认注入<code>WxPayService</code>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/pay&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span> <span class="token comment">// 默认注入WxPayService</span>
    <span class="token keyword">private</span> <span class="token class-name">PayService</span> payService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/pay&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> payService<span class="token punctuation">.</span><span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要使用<code>AliPayService</code>，仍然可以通过<code>@Qualifier</code>指定：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;aliPayService&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">PayService</span> aliPayService<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-resource注解" tabindex="-1"><a class="header-anchor" href="#_6-3-resource注解"><span>6.3 @Resource注解</span></a></h3><p><code>@Resource</code>是Java标准注解，可以通过name属性指定具体的Bean名称。</p><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">&quot;wxPayService&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WxPayService</span> <span class="token keyword">implements</span> <span class="token class-name">PayService</span> <span class="token punctuation">{</span>
    <span class="token comment">// 微信支付实现</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">&quot;aliPayService&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliPayService</span> <span class="token keyword">implements</span> <span class="token class-name">PayService</span> <span class="token punctuation">{</span>
    <span class="token comment">// 支付宝支付实现</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Controller中使用<code>@Resource</code>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/pay&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;wxPayService&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 指定注入微信支付实现</span>
    <span class="token keyword">private</span> <span class="token class-name">PayService</span> wxPayService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;aliPayService&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 指定注入支付宝支付实现</span>
    <span class="token keyword">private</span> <span class="token class-name">PayService</span> aliPayService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/wx&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">wxPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> wxPayService<span class="token punctuation">.</span><span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/ali&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">aliPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> aliPayService<span class="token punctuation">.</span><span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-4-conditional-或自定义条件注解" tabindex="-1"><a class="header-anchor" href="#_6-4-conditional-或自定义条件注解"><span>6.4 @Conditional 或自定义条件注解</span></a></h3><p>如果希望根据某些条件动态选择实现类，可以使用<code>@Conditional</code>注解或自定义条件注解。</p><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;payment.type&quot;</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">&quot;wx&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WxPayService</span> <span class="token keyword">implements</span> <span class="token class-name">PayService</span> <span class="token punctuation">{</span>
    <span class="token comment">// 微信支付实现</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;payment.type&quot;</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">&quot;ali&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliPayService</span> <span class="token keyword">implements</span> <span class="token class-name">PayService</span> <span class="token punctuation">{</span>
    <span class="token comment">// 支付宝支付实现</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在application.properties中配置：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">payment.type</span><span class="token punctuation">=</span><span class="token value attr-value">wx</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在Controller中直接注入：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/pay&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">PayService</span> payService<span class="token punctuation">;</span> <span class="token comment">// 根据配置动态注入WxPayService或AliPayService</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/pay&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> payService<span class="token punctuation">.</span><span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-5-工厂模式" tabindex="-1"><a class="header-anchor" href="#_6-5-工厂模式"><span>6.5 工厂模式</span></a></h3><p>如果支付方式需要动态切换（例如根据用户选择），可以使用工厂模式来管理不同的实现类。</p><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayServiceFactory</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">PayService</span><span class="token punctuation">&gt;</span></span> payServiceMap<span class="token punctuation">;</span> <span class="token comment">// 所有PayService实现类会自动注入</span>

    <span class="token keyword">public</span> <span class="token class-name">PayService</span> <span class="token function">getPayService</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> payServiceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Controller中使用工厂：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/pay&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">PayServiceFactory</span> payServiceFactory<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/pay&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">PayService</span> payService <span class="token operator">=</span> payServiceFactory<span class="token punctuation">.</span><span class="token function">getPayService</span><span class="token punctuation">(</span>type <span class="token operator">+</span> <span class="token string">&quot;PayService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> payService<span class="token punctuation">.</span><span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-6-总结" tabindex="-1"><a class="header-anchor" href="#_6-6-总结"><span>6.6 总结</span></a></h3><table><thead><tr><th>方式</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>@Qualifier</td><td>明确指定实现类，简单直接</td><td>需要手动指定Bean名称</td><td>实现类较少且固定的场景</td></tr><tr><td>@Primary</td><td>默认注入，减少配置</td><td>只能指定一个默认实现</td><td>有默认实现类的场景</td></tr><tr><td>@Resource</td><td>Java标准注解，支持按名称注入</td><td>功能与@Qualifier类似</td><td>需要按名称注入的场景</td></tr><tr><td>@Conditional</td><td>动态选择实现类，灵活</td><td>需要额外配置</td><td>根据条件动态选择实现类的场景</td></tr><tr><td>工厂模式</td><td>动态切换实现类，扩展性强</td><td>需要额外编写工厂类</td><td>实现类较多且需要动态切换的场景</td></tr></tbody></table><p>根据你的具体需求选择合适的方式。如果支付方式是固定的，推荐使用<code>@Qualifier</code>或<code>@Primary</code>；如果需要动态切换，推荐使用工厂模式。</p>`,58))])}const d=s(l,[["render",c],["__file","service层接口说明.html.vue"]]),v=JSON.parse('{"path":"/posts/backend/service%E5%B1%82%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E.html","title":"service层接口说明","lang":"zh-CN","frontmatter":{"title":"service层接口说明","date":"2025-02-23T00:00:00.000Z","icon":"dragon","category":["后端"],"tag":["开发示例"],"order":131,"description":"Sring Boot项目中分为controller, service, mapper三层 为什么service层需要声明service接口,然后再去实现该接口","head":[["meta",{"property":"og:url","content":"https://github.com/Neumannzc/blog/blog/posts/backend/service%E5%B1%82%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E.html"}],["meta",{"property":"og:site_name","content":"Cafe Babe"}],["meta",{"property":"og:title","content":"service层接口说明"}],["meta",{"property":"og:description","content":"Sring Boot项目中分为controller, service, mapper三层 为什么service层需要声明service接口,然后再去实现该接口"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-27T13:21:51.000Z"}],["meta",{"property":"article:author","content":"Cafe Babe"}],["meta",{"property":"article:tag","content":"开发示例"}],["meta",{"property":"article:published_time","content":"2025-02-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-27T13:21:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"service层接口说明\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-23T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-27T13:21:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cafe Babe\\",\\"url\\":\\"https://gitee.com/z517890027\\"}]}"]]},"headers":[{"level":2,"title":"1. 为什么需要声明Service接口","slug":"_1-为什么需要声明service接口","link":"#_1-为什么需要声明service接口","children":[]},{"level":2,"title":"2. 优点","slug":"_2-优点","link":"#_2-优点","children":[]},{"level":2,"title":"3. 缺点","slug":"_3-缺点","link":"#_3-缺点","children":[]},{"level":2,"title":"4. 适用场景","slug":"_4-适用场景","link":"#_4-适用场景","children":[]},{"level":2,"title":"5. 总结","slug":"_5-总结","link":"#_5-总结","children":[]},{"level":2,"title":"6. service多实现类的使用","slug":"_6-service多实现类的使用","link":"#_6-service多实现类的使用","children":[{"level":3,"title":"6.1. @Qualifier注解","slug":"_6-1-qualifier注解","link":"#_6-1-qualifier注解","children":[]},{"level":3,"title":"6.2 @Primary注解","slug":"_6-2-primary注解","link":"#_6-2-primary注解","children":[]},{"level":3,"title":"6.3 @Resource注解","slug":"_6-3-resource注解","link":"#_6-3-resource注解","children":[]},{"level":3,"title":"6.4 @Conditional 或自定义条件注解","slug":"_6-4-conditional-或自定义条件注解","link":"#_6-4-conditional-或自定义条件注解","children":[]},{"level":3,"title":"6.5 工厂模式","slug":"_6-5-工厂模式","link":"#_6-5-工厂模式","children":[]},{"level":3,"title":"6.6 总结","slug":"_6-6-总结","link":"#_6-6-总结","children":[]}]}],"git":{"createdTime":1740662511000,"updatedTime":1740662511000,"contributors":[{"name":"Cafe Babe","email":"517890027@qq.com","commits":1}]},"readingTime":{"minutes":6.66,"words":1997},"filePathRelative":"posts/backend/service层接口说明.md","localizedDate":"2025年2月23日","excerpt":"<p>Sring Boot项目中分为controller, service, mapper三层</p>\\n<p>为什么service层需要声明service接口,然后再去实现该接口</p>\\n","autoDesc":true}');export{d as comp,v as data};
